
wavTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007080  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007778  08007778  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08007778  08007778  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007778  08007778  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007778  08007778  00017778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bc4  20000024  080077a4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002be8  080077a4  00022be8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cf0  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029db  00000000  00000000  00030d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b8  00000000  00000000  00033718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f50  00000000  00000000  000347d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015903  00000000  00000000  00035720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d874  00000000  00000000  0004b023  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074098  00000000  00000000  00058897  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc92f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004460  00000000  00000000  000cc9ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08007174 	.word	0x08007174

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08007174 	.word	0x08007174

0800014c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <SELECT+0x14>)
 8000156:	f001 fcc9 	bl	8001aec <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <DESELECT+0x14>)
 800016e:	f001 fcbd 	bl	8001aec <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000186:	bf00      	nop
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <SPI_TxByte+0x30>)
 800018a:	f002 fe97 	bl	8002ebc <HAL_SPI_GetState>
 800018e:	4603      	mov	r3, r0
 8000190:	2b01      	cmp	r3, #1
 8000192:	d1f9      	bne.n	8000188 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000194:	1df9      	adds	r1, r7, #7
 8000196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019a:	2201      	movs	r2, #1
 800019c:	4803      	ldr	r0, [pc, #12]	; (80001ac <SPI_TxByte+0x30>)
 800019e:	f002 fbb7 	bl	8002910 <HAL_SPI_Transmit>
}
 80001a2:	bf00      	nop
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000324 	.word	0x20000324

080001b0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80001b6:	23ff      	movs	r3, #255	; 0xff
 80001b8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80001be:	bf00      	nop
 80001c0:	4809      	ldr	r0, [pc, #36]	; (80001e8 <SPI_RxByte+0x38>)
 80001c2:	f002 fe7b 	bl	8002ebc <HAL_SPI_GetState>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b01      	cmp	r3, #1
 80001ca:	d1f9      	bne.n	80001c0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80001cc:	1dba      	adds	r2, r7, #6
 80001ce:	1df9      	adds	r1, r7, #7
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	2301      	movs	r3, #1
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <SPI_RxByte+0x38>)
 80001da:	f002 fccd 	bl	8002b78 <HAL_SPI_TransmitReceive>
  
  return data;
 80001de:	79bb      	ldrb	r3, [r7, #6]
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	3708      	adds	r7, #8
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	20000324 	.word	0x20000324

080001ec <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80001f4:	f7ff ffdc 	bl	80001b0 <SPI_RxByte>
 80001f8:	4603      	mov	r3, r0
 80001fa:	461a      	mov	r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	701a      	strb	r2, [r3, #0]
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}

08000208 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <SD_ReadyWait+0x34>)
 8000210:	2232      	movs	r2, #50	; 0x32
 8000212:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000214:	f7ff ffcc 	bl	80001b0 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000218:	f7ff ffca 	bl	80001b0 <SPI_RxByte>
 800021c:	4603      	mov	r3, r0
 800021e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	2bff      	cmp	r3, #255	; 0xff
 8000224:	d004      	beq.n	8000230 <SD_ReadyWait+0x28>
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <SD_ReadyWait+0x34>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	b2db      	uxtb	r3, r3
 800022c:	2b00      	cmp	r3, #0
 800022e:	d1f3      	bne.n	8000218 <SD_ReadyWait+0x10>
  
  return res;
 8000230:	79fb      	ldrb	r3, [r7, #7]
}
 8000232:	4618      	mov	r0, r3
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000b7c 	.word	0x20000b7c

08000240 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000246:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800024a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 800024c:	f7ff ff8a 	bl	8000164 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000250:	2300      	movs	r3, #0
 8000252:	613b      	str	r3, [r7, #16]
 8000254:	e005      	b.n	8000262 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000256:	20ff      	movs	r0, #255	; 0xff
 8000258:	f7ff ff90 	bl	800017c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800025c:	693b      	ldr	r3, [r7, #16]
 800025e:	3301      	adds	r3, #1
 8000260:	613b      	str	r3, [r7, #16]
 8000262:	693b      	ldr	r3, [r7, #16]
 8000264:	2b09      	cmp	r3, #9
 8000266:	ddf6      	ble.n	8000256 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000268:	f7ff ff70 	bl	800014c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800026c:	2340      	movs	r3, #64	; 0x40
 800026e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000280:	2395      	movs	r3, #149	; 0x95
 8000282:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	e009      	b.n	800029e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800028a:	1d3a      	adds	r2, r7, #4
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ff72 	bl	800017c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	3301      	adds	r3, #1
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	2b05      	cmp	r3, #5
 80002a2:	ddf2      	ble.n	800028a <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80002a4:	e002      	b.n	80002ac <SD_PowerOn+0x6c>
  {
    Count--;
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80002ac:	f7ff ff80 	bl	80001b0 <SPI_RxByte>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b01      	cmp	r3, #1
 80002b4:	d002      	beq.n	80002bc <SD_PowerOn+0x7c>
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1f4      	bne.n	80002a6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80002bc:	f7ff ff52 	bl	8000164 <DESELECT>
  SPI_TxByte(0XFF);
 80002c0:	20ff      	movs	r0, #255	; 0xff
 80002c2:	f7ff ff5b 	bl	800017c <SPI_TxByte>
  
  PowerFlag = 1;
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <SD_PowerOn+0x94>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	701a      	strb	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000041 	.word	0x20000041

080002d8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <SD_PowerOff+0x14>)
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000041 	.word	0x20000041

080002f0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80002f4:	4b02      	ldr	r3, [pc, #8]	; (8000300 <SD_CheckPower+0x10>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	20000041 	.word	0x20000041

08000304 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <SD_RxDataBlock+0x68>)
 8000310:	220a      	movs	r2, #10
 8000312:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000314:	f7ff ff4c 	bl	80001b0 <SPI_RxByte>
 8000318:	4603      	mov	r3, r0
 800031a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800031c:	7bfb      	ldrb	r3, [r7, #15]
 800031e:	2bff      	cmp	r3, #255	; 0xff
 8000320:	d104      	bne.n	800032c <SD_RxDataBlock+0x28>
 8000322:	4b12      	ldr	r3, [pc, #72]	; (800036c <SD_RxDataBlock+0x68>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1f3      	bne.n	8000314 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	2bfe      	cmp	r3, #254	; 0xfe
 8000330:	d001      	beq.n	8000336 <SD_RxDataBlock+0x32>
    return FALSE;
 8000332:	2300      	movs	r3, #0
 8000334:	e016      	b.n	8000364 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	1c5a      	adds	r2, r3, #1
 800033a:	607a      	str	r2, [r7, #4]
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff55 	bl	80001ec <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	1c5a      	adds	r2, r3, #1
 8000346:	607a      	str	r2, [r7, #4]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff4f 	bl	80001ec <SPI_RxBytePtr>
  } while(btr -= 2);
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	3b02      	subs	r3, #2
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1ed      	bne.n	8000336 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800035a:	f7ff ff29 	bl	80001b0 <SPI_RxByte>
  SPI_RxByte();
 800035e:	f7ff ff27 	bl	80001b0 <SPI_RxByte>
  
  return TRUE;
 8000362:	2301      	movs	r3, #1
}
 8000364:	4618      	mov	r0, r3
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	20000b7d 	.word	0x20000b7d

08000370 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	460b      	mov	r3, r1
 800037a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000380:	f7ff ff42 	bl	8000208 <SD_ReadyWait>
 8000384:	4603      	mov	r3, r0
 8000386:	2bff      	cmp	r3, #255	; 0xff
 8000388:	d001      	beq.n	800038e <SD_TxDataBlock+0x1e>
    return FALSE;
 800038a:	2300      	movs	r3, #0
 800038c:	e040      	b.n	8000410 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 800038e:	78fb      	ldrb	r3, [r7, #3]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff fef3 	bl	800017c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000396:	78fb      	ldrb	r3, [r7, #3]
 8000398:	2bfd      	cmp	r3, #253	; 0xfd
 800039a:	d031      	beq.n	8000400 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	1c5a      	adds	r2, r3, #1
 80003a4:	607a      	str	r2, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff fee7 	bl	800017c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	1c5a      	adds	r2, r3, #1
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff fee0 	bl	800017c <SPI_TxByte>
    } while (--wc);
 80003bc:	7bbb      	ldrb	r3, [r7, #14]
 80003be:	3b01      	subs	r3, #1
 80003c0:	73bb      	strb	r3, [r7, #14]
 80003c2:	7bbb      	ldrb	r3, [r7, #14]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1eb      	bne.n	80003a0 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80003c8:	f7ff fef2 	bl	80001b0 <SPI_RxByte>
    SPI_RxByte();
 80003cc:	f7ff fef0 	bl	80001b0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80003d0:	e00b      	b.n	80003ea <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80003d2:	f7ff feed 	bl	80001b0 <SPI_RxByte>
 80003d6:	4603      	mov	r3, r0
 80003d8:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	f003 031f 	and.w	r3, r3, #31
 80003e0:	2b05      	cmp	r3, #5
 80003e2:	d006      	beq.n	80003f2 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80003e4:	7b7b      	ldrb	r3, [r7, #13]
 80003e6:	3301      	adds	r3, #1
 80003e8:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80003ea:	7b7b      	ldrb	r3, [r7, #13]
 80003ec:	2b40      	cmp	r3, #64	; 0x40
 80003ee:	d9f0      	bls.n	80003d2 <SD_TxDataBlock+0x62>
 80003f0:	e000      	b.n	80003f4 <SD_TxDataBlock+0x84>
        break;
 80003f2:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80003f4:	bf00      	nop
 80003f6:	f7ff fedb 	bl	80001b0 <SPI_RxByte>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0fa      	beq.n	80003f6 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	f003 031f 	and.w	r3, r3, #31
 8000406:	2b05      	cmp	r3, #5
 8000408:	d101      	bne.n	800040e <SD_TxDataBlock+0x9e>
    return TRUE;
 800040a:	2301      	movs	r3, #1
 800040c:	e000      	b.n	8000410 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800040e:	2300      	movs	r3, #0
}
 8000410:	4618      	mov	r0, r3
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	6039      	str	r1, [r7, #0]
 8000422:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000424:	f7ff fef0 	bl	8000208 <SD_ReadyWait>
 8000428:	4603      	mov	r3, r0
 800042a:	2bff      	cmp	r3, #255	; 0xff
 800042c:	d001      	beq.n	8000432 <SD_SendCmd+0x1a>
    return 0xFF;
 800042e:	23ff      	movs	r3, #255	; 0xff
 8000430:	e040      	b.n	80004b4 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff fea1 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	0e1b      	lsrs	r3, r3, #24
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff fe9b 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	0c1b      	lsrs	r3, r3, #16
 800044a:	b2db      	uxtb	r3, r3
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fe95 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	0a1b      	lsrs	r3, r3, #8
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff fe8f 	bl	800017c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff fe8a 	bl	800017c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000468:	2300      	movs	r3, #0
 800046a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	2b40      	cmp	r3, #64	; 0x40
 8000470:	d101      	bne.n	8000476 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000472:	2395      	movs	r3, #149	; 0x95
 8000474:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b48      	cmp	r3, #72	; 0x48
 800047a:	d101      	bne.n	8000480 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800047c:	2387      	movs	r3, #135	; 0x87
 800047e:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff fe7a 	bl	800017c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	2b4c      	cmp	r3, #76	; 0x4c
 800048c:	d101      	bne.n	8000492 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800048e:	f7ff fe8f 	bl	80001b0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8000492:	230a      	movs	r3, #10
 8000494:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000496:	f7ff fe8b 	bl	80001b0 <SPI_RxByte>
 800049a:	4603      	mov	r3, r0
 800049c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800049e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	da05      	bge.n	80004b2 <SD_SendCmd+0x9a>
 80004a6:	7bbb      	ldrb	r3, [r7, #14]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	73bb      	strb	r3, [r7, #14]
 80004ac:	7bbb      	ldrb	r3, [r7, #14]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f1      	bne.n	8000496 <SD_SendCmd+0x7e>
  
  return res;
 80004b2:	7b7b      	ldrb	r3, [r7, #13]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3710      	adds	r7, #16
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80004cc:	2301      	movs	r3, #1
 80004ce:	e0d5      	b.n	800067c <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80004d0:	4b6c      	ldr	r3, [pc, #432]	; (8000684 <SD_disk_initialize+0x1c8>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	f003 0302 	and.w	r3, r3, #2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d003      	beq.n	80004e6 <SD_disk_initialize+0x2a>
    return Stat;        
 80004de:	4b69      	ldr	r3, [pc, #420]	; (8000684 <SD_disk_initialize+0x1c8>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	e0ca      	b.n	800067c <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 80004e6:	f7ff feab 	bl	8000240 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 80004ea:	f7ff fe2f 	bl	800014c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 80004f2:	2100      	movs	r1, #0
 80004f4:	2040      	movs	r0, #64	; 0x40
 80004f6:	f7ff ff8f 	bl	8000418 <SD_SendCmd>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	f040 80a5 	bne.w	800064c <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000502:	4b61      	ldr	r3, [pc, #388]	; (8000688 <SD_disk_initialize+0x1cc>)
 8000504:	2264      	movs	r2, #100	; 0x64
 8000506:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8000508:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800050c:	2048      	movs	r0, #72	; 0x48
 800050e:	f7ff ff83 	bl	8000418 <SD_SendCmd>
 8000512:	4603      	mov	r3, r0
 8000514:	2b01      	cmp	r3, #1
 8000516:	d158      	bne.n	80005ca <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	e00c      	b.n	8000538 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800051e:	7bfc      	ldrb	r4, [r7, #15]
 8000520:	f7ff fe46 	bl	80001b0 <SPI_RxByte>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	f107 0310 	add.w	r3, r7, #16
 800052c:	4423      	add	r3, r4
 800052e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	3301      	adds	r3, #1
 8000536:	73fb      	strb	r3, [r7, #15]
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	2b03      	cmp	r3, #3
 800053c:	d9ef      	bls.n	800051e <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 800053e:	7abb      	ldrb	r3, [r7, #10]
 8000540:	2b01      	cmp	r3, #1
 8000542:	f040 8083 	bne.w	800064c <SD_disk_initialize+0x190>
 8000546:	7afb      	ldrb	r3, [r7, #11]
 8000548:	2baa      	cmp	r3, #170	; 0xaa
 800054a:	d17f      	bne.n	800064c <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800054c:	2100      	movs	r1, #0
 800054e:	2077      	movs	r0, #119	; 0x77
 8000550:	f7ff ff62 	bl	8000418 <SD_SendCmd>
 8000554:	4603      	mov	r3, r0
 8000556:	2b01      	cmp	r3, #1
 8000558:	d807      	bhi.n	800056a <SD_disk_initialize+0xae>
 800055a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800055e:	2069      	movs	r0, #105	; 0x69
 8000560:	f7ff ff5a 	bl	8000418 <SD_SendCmd>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800056a:	4b47      	ldr	r3, [pc, #284]	; (8000688 <SD_disk_initialize+0x1cc>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1eb      	bne.n	800054c <SD_disk_initialize+0x90>
 8000574:	e000      	b.n	8000578 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000576:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8000578:	4b43      	ldr	r3, [pc, #268]	; (8000688 <SD_disk_initialize+0x1cc>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d064      	beq.n	800064c <SD_disk_initialize+0x190>
 8000582:	2100      	movs	r1, #0
 8000584:	207a      	movs	r0, #122	; 0x7a
 8000586:	f7ff ff47 	bl	8000418 <SD_SendCmd>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d15d      	bne.n	800064c <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000590:	2300      	movs	r3, #0
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e00c      	b.n	80005b0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000596:	7bfc      	ldrb	r4, [r7, #15]
 8000598:	f7ff fe0a 	bl	80001b0 <SPI_RxByte>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4423      	add	r3, r4
 80005a6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d9ef      	bls.n	8000596 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80005b6:	7a3b      	ldrb	r3, [r7, #8]
 80005b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SD_disk_initialize+0x108>
 80005c0:	2306      	movs	r3, #6
 80005c2:	e000      	b.n	80005c6 <SD_disk_initialize+0x10a>
 80005c4:	2302      	movs	r3, #2
 80005c6:	73bb      	strb	r3, [r7, #14]
 80005c8:	e040      	b.n	800064c <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80005ca:	2100      	movs	r1, #0
 80005cc:	2077      	movs	r0, #119	; 0x77
 80005ce:	f7ff ff23 	bl	8000418 <SD_SendCmd>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d808      	bhi.n	80005ea <SD_disk_initialize+0x12e>
 80005d8:	2100      	movs	r1, #0
 80005da:	2069      	movs	r0, #105	; 0x69
 80005dc:	f7ff ff1c 	bl	8000418 <SD_SendCmd>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d801      	bhi.n	80005ea <SD_disk_initialize+0x12e>
 80005e6:	2302      	movs	r3, #2
 80005e8:	e000      	b.n	80005ec <SD_disk_initialize+0x130>
 80005ea:	2301      	movs	r3, #1
 80005ec:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d10e      	bne.n	8000612 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80005f4:	2100      	movs	r1, #0
 80005f6:	2077      	movs	r0, #119	; 0x77
 80005f8:	f7ff ff0e 	bl	8000418 <SD_SendCmd>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d80e      	bhi.n	8000620 <SD_disk_initialize+0x164>
 8000602:	2100      	movs	r1, #0
 8000604:	2069      	movs	r0, #105	; 0x69
 8000606:	f7ff ff07 	bl	8000418 <SD_SendCmd>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d107      	bne.n	8000620 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000610:	e00d      	b.n	800062e <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000612:	2100      	movs	r1, #0
 8000614:	2041      	movs	r0, #65	; 0x41
 8000616:	f7ff feff 	bl	8000418 <SD_SendCmd>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000620:	4b19      	ldr	r3, [pc, #100]	; (8000688 <SD_disk_initialize+0x1cc>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1e1      	bne.n	80005ee <SD_disk_initialize+0x132>
 800062a:	e000      	b.n	800062e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800062c:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <SD_disk_initialize+0x1cc>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d007      	beq.n	8000648 <SD_disk_initialize+0x18c>
 8000638:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063c:	2050      	movs	r0, #80	; 0x50
 800063e:	f7ff feeb 	bl	8000418 <SD_SendCmd>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 800064c:	4a0f      	ldr	r2, [pc, #60]	; (800068c <SD_disk_initialize+0x1d0>)
 800064e:	7bbb      	ldrb	r3, [r7, #14]
 8000650:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8000652:	f7ff fd87 	bl	8000164 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000656:	f7ff fdab 	bl	80001b0 <SPI_RxByte>
  
  if (type) 
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d008      	beq.n	8000672 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SD_disk_initialize+0x1c8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f023 0301 	bic.w	r3, r3, #1
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <SD_disk_initialize+0x1c8>)
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e001      	b.n	8000676 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000672:	f7ff fe31 	bl	80002d8 <SD_PowerOff>
  }
  
  return Stat;
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <SD_disk_initialize+0x1c8>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
}
 800067c:	4618      	mov	r0, r3
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	20000b7d 	.word	0x20000b7d
 800068c:	20000040 	.word	0x20000040

08000690 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80006a0:	2301      	movs	r3, #1
 80006a2:	e002      	b.n	80006aa <SD_disk_status+0x1a>
  
  return Stat;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <SD_disk_status+0x24>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	20000000 	.word	0x20000000

080006b8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d102      	bne.n	80006d4 <SD_disk_read+0x1c>
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d101      	bne.n	80006d8 <SD_disk_read+0x20>
    return RES_PARERR;
 80006d4:	2304      	movs	r3, #4
 80006d6:	e051      	b.n	800077c <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <SD_disk_read+0xcc>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SD_disk_read+0x32>
    return RES_NOTRDY;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e048      	b.n	800077c <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 80006ea:	4b27      	ldr	r3, [pc, #156]	; (8000788 <SD_disk_read+0xd0>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d102      	bne.n	80006fc <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	025b      	lsls	r3, r3, #9
 80006fa:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80006fc:	f7ff fd26 	bl	800014c <SELECT>
  
  if (count == 1) 
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d111      	bne.n	800072a <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2051      	movs	r0, #81	; 0x51
 800070a:	f7ff fe85 	bl	8000418 <SD_SendCmd>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d129      	bne.n	8000768 <SD_disk_read+0xb0>
 8000714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000718:	68b8      	ldr	r0, [r7, #8]
 800071a:	f7ff fdf3 	bl	8000304 <SD_RxDataBlock>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d021      	beq.n	8000768 <SD_disk_read+0xb0>
      count = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	e01e      	b.n	8000768 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	2052      	movs	r0, #82	; 0x52
 800072e:	f7ff fe73 	bl	8000418 <SD_SendCmd>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d117      	bne.n	8000768 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	68b8      	ldr	r0, [r7, #8]
 800073e:	f7ff fde1 	bl	8000304 <SD_RxDataBlock>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00a      	beq.n	800075e <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800074e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	3b01      	subs	r3, #1
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1ed      	bne.n	8000738 <SD_disk_read+0x80>
 800075c:	e000      	b.n	8000760 <SD_disk_read+0xa8>
          break;
 800075e:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8000760:	2100      	movs	r1, #0
 8000762:	204c      	movs	r0, #76	; 0x4c
 8000764:	f7ff fe58 	bl	8000418 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000768:	f7ff fcfc 	bl	8000164 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 800076c:	f7ff fd20 	bl	80001b0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	bf14      	ite	ne
 8000776:	2301      	movne	r3, #1
 8000778:	2300      	moveq	r3, #0
 800077a:	b2db      	uxtb	r3, r3
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	20000040 	.word	0x20000040

0800078c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4603      	mov	r3, r0
 800079a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d102      	bne.n	80007a8 <SD_disk_write+0x1c>
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <SD_disk_write+0x20>
    return RES_PARERR;
 80007a8:	2304      	movs	r3, #4
 80007aa:	e06b      	b.n	8000884 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80007ac:	4b37      	ldr	r3, [pc, #220]	; (800088c <SD_disk_write+0x100>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SD_disk_write+0x32>
    return RES_NOTRDY;
 80007ba:	2303      	movs	r3, #3
 80007bc:	e062      	b.n	8000884 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <SD_disk_write+0x100>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SD_disk_write+0x44>
    return RES_WRPRT;
 80007cc:	2302      	movs	r3, #2
 80007ce:	e059      	b.n	8000884 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <SD_disk_write+0x104>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	025b      	lsls	r3, r3, #9
 80007e0:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80007e2:	f7ff fcb3 	bl	800014c <SELECT>
  
  if (count == 1) 
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d110      	bne.n	800080e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	2058      	movs	r0, #88	; 0x58
 80007f0:	f7ff fe12 	bl	8000418 <SD_SendCmd>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d13a      	bne.n	8000870 <SD_disk_write+0xe4>
 80007fa:	21fe      	movs	r1, #254	; 0xfe
 80007fc:	68b8      	ldr	r0, [r7, #8]
 80007fe:	f7ff fdb7 	bl	8000370 <SD_TxDataBlock>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d033      	beq.n	8000870 <SD_disk_write+0xe4>
      count = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	e030      	b.n	8000870 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <SD_disk_write+0x104>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	2b00      	cmp	r3, #0
 8000818:	d007      	beq.n	800082a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800081a:	2100      	movs	r1, #0
 800081c:	2077      	movs	r0, #119	; 0x77
 800081e:	f7ff fdfb 	bl	8000418 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000822:	6839      	ldr	r1, [r7, #0]
 8000824:	2057      	movs	r0, #87	; 0x57
 8000826:	f7ff fdf7 	bl	8000418 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	2059      	movs	r0, #89	; 0x59
 800082e:	f7ff fdf3 	bl	8000418 <SD_SendCmd>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d11b      	bne.n	8000870 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000838:	21fc      	movs	r1, #252	; 0xfc
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff fd98 	bl	8000370 <SD_TxDataBlock>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d00a      	beq.n	800085c <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800084c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3b01      	subs	r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1ee      	bne.n	8000838 <SD_disk_write+0xac>
 800085a:	e000      	b.n	800085e <SD_disk_write+0xd2>
          break;
 800085c:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800085e:	21fd      	movs	r1, #253	; 0xfd
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fd85 	bl	8000370 <SD_TxDataBlock>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <SD_disk_write+0xe4>
      {        
        count = 1;
 800086c:	2301      	movs	r3, #1
 800086e:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8000870:	f7ff fc78 	bl	8000164 <DESELECT>
  SPI_RxByte();
 8000874:	f7ff fc9c 	bl	80001b0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	20000040 	.word	0x20000040

08000894 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	603a      	str	r2, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	460b      	mov	r3, r1
 80008a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80008ae:	2304      	movs	r3, #4
 80008b0:	e117      	b.n	8000ae2 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	2b05      	cmp	r3, #5
 80008bc:	d126      	bne.n	800090c <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d00e      	beq.n	80008e4 <SD_disk_ioctl+0x50>
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d012      	beq.n	80008f0 <SD_disk_ioctl+0x5c>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d11a      	bne.n	8000904 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 80008ce:	f7ff fd0f 	bl	80002f0 <SD_CheckPower>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 80008d8:	f7ff fcfe 	bl	80002d8 <SD_PowerOff>
      res = RES_OK;
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80008e2:	e0fc      	b.n	8000ade <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 80008e4:	f7ff fcac 	bl	8000240 <SD_PowerOn>
      res = RES_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80008ee:	e0f6      	b.n	8000ade <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	1c5c      	adds	r4, r3, #1
 80008f4:	f7ff fcfc 	bl	80002f0 <SD_CheckPower>
 80008f8:	4603      	mov	r3, r0
 80008fa:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80008fc:	2300      	movs	r3, #0
 80008fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000902:	e0ec      	b.n	8000ade <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8000904:	2304      	movs	r3, #4
 8000906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800090a:	e0e8      	b.n	8000ade <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800090c:	4b77      	ldr	r3, [pc, #476]	; (8000aec <SD_disk_ioctl+0x258>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 800091a:	2303      	movs	r3, #3
 800091c:	e0e1      	b.n	8000ae2 <SD_disk_ioctl+0x24e>
    
    SELECT();
 800091e:	f7ff fc15 	bl	800014c <SELECT>
    
    switch (ctrl) 
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	2b0d      	cmp	r3, #13
 8000926:	f200 80cb 	bhi.w	8000ac0 <SD_disk_ioctl+0x22c>
 800092a:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <SD_disk_ioctl+0x9c>)
 800092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000930:	08000a2b 	.word	0x08000a2b
 8000934:	08000969 	.word	0x08000969
 8000938:	08000a1b 	.word	0x08000a1b
 800093c:	08000ac1 	.word	0x08000ac1
 8000940:	08000ac1 	.word	0x08000ac1
 8000944:	08000ac1 	.word	0x08000ac1
 8000948:	08000ac1 	.word	0x08000ac1
 800094c:	08000ac1 	.word	0x08000ac1
 8000950:	08000ac1 	.word	0x08000ac1
 8000954:	08000ac1 	.word	0x08000ac1
 8000958:	08000ac1 	.word	0x08000ac1
 800095c:	08000a3d 	.word	0x08000a3d
 8000960:	08000a61 	.word	0x08000a61
 8000964:	08000a85 	.word	0x08000a85
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8000968:	2100      	movs	r1, #0
 800096a:	2049      	movs	r0, #73	; 0x49
 800096c:	f7ff fd54 	bl	8000418 <SD_SendCmd>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	f040 80a8 	bne.w	8000ac8 <SD_disk_ioctl+0x234>
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2110      	movs	r1, #16
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fcc0 	bl	8000304 <SD_RxDataBlock>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	f000 809e 	beq.w	8000ac8 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 800098c:	7b3b      	ldrb	r3, [r7, #12]
 800098e:	099b      	lsrs	r3, r3, #6
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b01      	cmp	r3, #1
 8000994:	d10e      	bne.n	80009b4 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000996:	7d7b      	ldrb	r3, [r7, #21]
 8000998:	b29a      	uxth	r2, r3
 800099a:	7d3b      	ldrb	r3, [r7, #20]
 800099c:	b29b      	uxth	r3, r3
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	4413      	add	r3, r2
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	3301      	adds	r3, #1
 80009a8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80009aa:	8bfb      	ldrh	r3, [r7, #30]
 80009ac:	029a      	lsls	r2, r3, #10
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	e02e      	b.n	8000a12 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009b4:	7c7b      	ldrb	r3, [r7, #17]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	7dbb      	ldrb	r3, [r7, #22]
 80009be:	09db      	lsrs	r3, r3, #7
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4413      	add	r3, r2
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	7d7b      	ldrb	r3, [r7, #21]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f003 0306 	and.w	r3, r3, #6
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4413      	add	r3, r2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	3302      	adds	r3, #2
 80009d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80009dc:	7d3b      	ldrb	r3, [r7, #20]
 80009de:	099b      	lsrs	r3, r3, #6
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	7cfb      	ldrb	r3, [r7, #19]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	4413      	add	r3, r2
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	7cbb      	ldrb	r3, [r7, #18]
 80009f2:	029b      	lsls	r3, r3, #10
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	4413      	add	r3, r2
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	3301      	adds	r3, #1
 8000a02:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000a04:	8bfa      	ldrh	r2, [r7, #30]
 8000a06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a0a:	3b09      	subs	r3, #9
 8000a0c:	409a      	lsls	r2, r3
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000a18:	e056      	b.n	8000ac8 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a20:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a28:	e055      	b.n	8000ad6 <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000a2a:	f7ff fbed 	bl	8000208 <SD_ReadyWait>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2bff      	cmp	r3, #255	; 0xff
 8000a32:	d14b      	bne.n	8000acc <SD_disk_ioctl+0x238>
        res = RES_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a3a:	e047      	b.n	8000acc <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2049      	movs	r0, #73	; 0x49
 8000a40:	f7ff fcea 	bl	8000418 <SD_SendCmd>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d142      	bne.n	8000ad0 <SD_disk_ioctl+0x23c>
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	6a38      	ldr	r0, [r7, #32]
 8000a4e:	f7ff fc59 	bl	8000304 <SD_RxDataBlock>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d03b      	beq.n	8000ad0 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a5e:	e037      	b.n	8000ad0 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000a60:	2100      	movs	r1, #0
 8000a62:	204a      	movs	r0, #74	; 0x4a
 8000a64:	f7ff fcd8 	bl	8000418 <SD_SendCmd>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d132      	bne.n	8000ad4 <SD_disk_ioctl+0x240>
 8000a6e:	2110      	movs	r1, #16
 8000a70:	6a38      	ldr	r0, [r7, #32]
 8000a72:	f7ff fc47 	bl	8000304 <SD_RxDataBlock>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d02b      	beq.n	8000ad4 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a82:	e027      	b.n	8000ad4 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8000a84:	2100      	movs	r1, #0
 8000a86:	207a      	movs	r0, #122	; 0x7a
 8000a88:	f7ff fcc6 	bl	8000418 <SD_SendCmd>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d116      	bne.n	8000ac0 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a98:	e00b      	b.n	8000ab2 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8000a9a:	6a3c      	ldr	r4, [r7, #32]
 8000a9c:	1c63      	adds	r3, r4, #1
 8000a9e:	623b      	str	r3, [r7, #32]
 8000aa0:	f7ff fb86 	bl	80001b0 <SPI_RxByte>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000aac:	3301      	adds	r3, #1
 8000aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d9ef      	bls.n	8000a9a <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ac6:	e006      	b.n	8000ad6 <SD_disk_ioctl+0x242>
      break;
 8000ac8:	bf00      	nop
 8000aca:	e004      	b.n	8000ad6 <SD_disk_ioctl+0x242>
      break;
 8000acc:	bf00      	nop
 8000ace:	e002      	b.n	8000ad6 <SD_disk_ioctl+0x242>
      break;
 8000ad0:	bf00      	nop
 8000ad2:	e000      	b.n	8000ad6 <SD_disk_ioctl+0x242>
      break;
 8000ad4:	bf00      	nop
    }
    
    DESELECT();
 8000ad6:	f7ff fb45 	bl	8000164 <DESELECT>
    SPI_RxByte();
 8000ada:	f7ff fb69 	bl	80001b0 <SPI_RxByte>
  }
  
  return res;
 8000ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	372c      	adds	r7, #44	; 0x2c
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000000 	.word	0x20000000

08000af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afa:	f000 fd2d 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afe:	f000 f969 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b02:	f000 fa9b 	bl	800103c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b06:	f000 f9df 	bl	8000ec8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b0a:	f000 fa13 	bl	8000f34 <MX_SPI2_Init>
  MX_RTC_Init();
 8000b0e:	f000 f9bf 	bl	8000e90 <MX_RTC_Init>
  MX_FATFS_Init();
 8000b12:	f002 fe1b 	bl	800374c <MX_FATFS_Init>
  MX_TIM4_Init();
 8000b16:	f000 fa43 	bl	8000fa0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	//mount drive
	fres = f_mount(&fs, "/", 1); //1=mount now
 8000b1a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000b1e:	f103 0318 	add.w	r3, r3, #24
 8000b22:	3b18      	subs	r3, #24
 8000b24:	2201      	movs	r2, #1
 8000b26:	49a3      	ldr	r1, [pc, #652]	; (8000db4 <main+0x2c4>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f005 fb91 	bl	8006250 <f_mount>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000b34:	f102 0213 	add.w	r2, r2, #19
 8000b38:	7013      	strb	r3, [r2, #0]
	if (fres != FR_OK) {
 8000b3a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000b3e:	f103 0313 	add.w	r3, r3, #19
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d000      	beq.n	8000b4a <main+0x5a>
		while (1);
 8000b48:	e7fe      	b.n	8000b48 <main+0x58>
	}
	//Open wav file
    fres = f_open(&wavFile, "fishery.wav", FA_READ);
 8000b4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b4e:	3b24      	subs	r3, #36	; 0x24
 8000b50:	2201      	movs	r2, #1
 8000b52:	4999      	ldr	r1, [pc, #612]	; (8000db8 <main+0x2c8>)
 8000b54:	4618      	mov	r0, r3
 8000b56:	f005 fbc5 	bl	80062e4 <f_open>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000b60:	f102 0213 	add.w	r2, r2, #19
 8000b64:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 8000b66:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000b6a:	f103 0313 	add.w	r3, r3, #19
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d000      	beq.n	8000b76 <main+0x86>
    		while (1);
 8000b74:	e7fe      	b.n	8000b74 <main+0x84>
    }
	//read header
	f_read(&wavFile, &waveData, 44, &bytesRead);	//TODO: add error checking here
 8000b76:	f107 0318 	add.w	r3, r7, #24
 8000b7a:	3b14      	subs	r3, #20
 8000b7c:	f107 0118 	add.w	r1, r7, #24
 8000b80:	3910      	subs	r1, #16
 8000b82:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000b86:	3824      	subs	r0, #36	; 0x24
 8000b88:	222c      	movs	r2, #44	; 0x2c
 8000b8a:	f005 fee5 	bl	8006958 <f_read>
	//populate header with data
	fixWave(&waveData);
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	3b10      	subs	r3, #16
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fc59 	bl	800144c <fixWave>

	//fill buffer to start
	totalBytesRead = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000ba0:	f102 0214 	add.w	r2, r2, #20
 8000ba4:	6013      	str	r3, [r2, #0]
	do{
		f_read(&wavFile, audioBuffer, AUDIO_BUFFER_SIZE*2, &bytesRead);
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	3b14      	subs	r3, #20
 8000bac:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000bb0:	3824      	subs	r0, #36	; 0x24
 8000bb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb6:	4981      	ldr	r1, [pc, #516]	; (8000dbc <main+0x2cc>)
 8000bb8:	f005 fece 	bl	8006958 <f_read>
		totalBytesRead += bytesRead;
 8000bbc:	f107 0318 	add.w	r3, r7, #24
 8000bc0:	3b14      	subs	r3, #20
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000bc8:	f102 0214 	add.w	r2, r2, #20
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000bd4:	f102 0214 	add.w	r2, r2, #20
 8000bd8:	6013      	str	r3, [r2, #0]
	} while(totalBytesRead < AUDIO_BUFFER_SIZE*2 && !f_eof(&wavFile));
 8000bda:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000bde:	f103 0314 	add.w	r3, r3, #20
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000be8:	da0f      	bge.n	8000c0a <main+0x11a>
 8000bea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bee:	3b24      	subs	r3, #36	; 0x24
 8000bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bfc:	3b24      	subs	r3, #36	; 0x24
 8000bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c02:	330c      	adds	r3, #12
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d1cd      	bne.n	8000ba6 <main+0xb6>

	//Timer interrupt enable
	HAL_TIM_Base_Start_IT(&htim4);
 8000c0a:	486d      	ldr	r0, [pc, #436]	; (8000dc0 <main+0x2d0>)
 8000c0c:	f002 fa16 	bl	800303c <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */

			//reload audio data if necessary
			//if audio EOF flag isn't set
			if(!(audioFlag&AUDIO_EOF)) {
 8000c10:	4b6c      	ldr	r3, [pc, #432]	; (8000dc4 <main+0x2d4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1f9      	bne.n	8000c10 <main+0x120>
				//TODO: add flag to indicate if file needs reloading
				//TODO: add buffer filling for second half of buffer
				//TODO: stop timer if file is finished

				//load the second half of the array if necessary
				if(audioFlag&AUDIO_LOADLAST && audioDataInd < AUDIO_BUFFER_SIZE/2 && !f_eof(&wavFile)) {
 8000c1c:	4b69      	ldr	r3, [pc, #420]	; (8000dc4 <main+0x2d4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d04d      	beq.n	8000cc4 <main+0x1d4>
 8000c28:	4b67      	ldr	r3, [pc, #412]	; (8000dc8 <main+0x2d8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c30:	d248      	bcs.n	8000cc4 <main+0x1d4>
 8000c32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c36:	3b24      	subs	r3, #36	; 0x24
 8000c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c44:	3b24      	subs	r3, #36	; 0x24
 8000c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c4a:	330c      	adds	r3, #12
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d038      	beq.n	8000cc4 <main+0x1d4>
					totalBytesRead = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000c58:	f102 0214 	add.w	r2, r2, #20
 8000c5c:	6013      	str	r3, [r2, #0]
					do{
						f_read(&wavFile, &(audioBuffer[AUDIO_BUFFER_SIZE/2]), AUDIO_BUFFER_SIZE, &bytesRead);
 8000c5e:	f107 0318 	add.w	r3, r7, #24
 8000c62:	3b14      	subs	r3, #20
 8000c64:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000c68:	3824      	subs	r0, #36	; 0x24
 8000c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c6e:	4957      	ldr	r1, [pc, #348]	; (8000dcc <main+0x2dc>)
 8000c70:	f005 fe72 	bl	8006958 <f_read>
						totalBytesRead += bytesRead;
 8000c74:	f107 0318 	add.w	r3, r7, #24
 8000c78:	3b14      	subs	r3, #20
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000c80:	f102 0214 	add.w	r2, r2, #20
 8000c84:	6812      	ldr	r2, [r2, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000c8c:	f102 0214 	add.w	r2, r2, #20
 8000c90:	6013      	str	r3, [r2, #0]
					} while(totalBytesRead < AUDIO_BUFFER_SIZE && !f_eof(&wavFile));
 8000c92:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000c96:	f103 0314 	add.w	r3, r3, #20
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca0:	da64      	bge.n	8000d6c <main+0x27c>
 8000ca2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ca6:	3b24      	subs	r3, #36	; 0x24
 8000ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cac:	3308      	adds	r3, #8
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cb4:	3b24      	subs	r3, #36	; 0x24
 8000cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cba:	330c      	adds	r3, #12
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d1cd      	bne.n	8000c5e <main+0x16e>
				if(audioFlag&AUDIO_LOADLAST && audioDataInd < AUDIO_BUFFER_SIZE/2 && !f_eof(&wavFile)) {
 8000cc2:	e053      	b.n	8000d6c <main+0x27c>
				}
				//else load the first half of the array if necessary
				else if(!(audioFlag&AUDIO_LOADLAST) && audioDataInd > AUDIO_BUFFER_SIZE/2 && !f_eof(&wavFile)) {
 8000cc4:	4b3f      	ldr	r3, [pc, #252]	; (8000dc4 <main+0x2d4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d14e      	bne.n	8000d6e <main+0x27e>
 8000cd0:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <main+0x2d8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cd8:	d949      	bls.n	8000d6e <main+0x27e>
 8000cda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cde:	3b24      	subs	r3, #36	; 0x24
 8000ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ce4:	3308      	adds	r3, #8
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cec:	3b24      	subs	r3, #36	; 0x24
 8000cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cf2:	330c      	adds	r3, #12
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d039      	beq.n	8000d6e <main+0x27e>
					totalBytesRead = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000d00:	f102 0214 	add.w	r2, r2, #20
 8000d04:	6013      	str	r3, [r2, #0]
					do{
						f_read(&wavFile, &(audioBuffer[AUDIO_BUFFER_SIZE/2]), AUDIO_BUFFER_SIZE, &bytesRead);
 8000d06:	f107 0318 	add.w	r3, r7, #24
 8000d0a:	3b14      	subs	r3, #20
 8000d0c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000d10:	3824      	subs	r0, #36	; 0x24
 8000d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d16:	492d      	ldr	r1, [pc, #180]	; (8000dcc <main+0x2dc>)
 8000d18:	f005 fe1e 	bl	8006958 <f_read>
						totalBytesRead += bytesRead;
 8000d1c:	f107 0318 	add.w	r3, r7, #24
 8000d20:	3b14      	subs	r3, #20
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000d28:	f102 0214 	add.w	r2, r2, #20
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000d34:	f102 0214 	add.w	r2, r2, #20
 8000d38:	6013      	str	r3, [r2, #0]
					} while(totalBytesRead < AUDIO_BUFFER_SIZE && !f_eof(&wavFile));
 8000d3a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000d3e:	f103 0314 	add.w	r3, r3, #20
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d48:	da11      	bge.n	8000d6e <main+0x27e>
 8000d4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d4e:	3b24      	subs	r3, #36	; 0x24
 8000d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d54:	3308      	adds	r3, #8
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d5c:	3b24      	subs	r3, #36	; 0x24
 8000d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d62:	330c      	adds	r3, #12
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d1cd      	bne.n	8000d06 <main+0x216>
 8000d6a:	e000      	b.n	8000d6e <main+0x27e>
				if(audioFlag&AUDIO_LOADLAST && audioDataInd < AUDIO_BUFFER_SIZE/2 && !f_eof(&wavFile)) {
 8000d6c:	bf00      	nop
				}

				//if file has reached EOF after read
				if(f_eof(&wavFile)) {
 8000d6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d72:	3b24      	subs	r3, #36	; 0x24
 8000d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d78:	3308      	adds	r3, #8
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d80:	3b24      	subs	r3, #36	; 0x24
 8000d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d86:	330c      	adds	r3, #12
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	f47f af40 	bne.w	8000c10 <main+0x120>
					audioFlag |= AUDIO_EOF;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <main+0x2d4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <main+0x2d4>)
 8000d9a:	6013      	str	r3, [r2, #0]
					//close files and unmount SD card
					f_close(&wavFile);
 8000d9c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000da0:	3b24      	subs	r3, #36	; 0x24
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 f8cc 	bl	8006f40 <f_close>
					f_mount(NULL, "", 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	4909      	ldr	r1, [pc, #36]	; (8000dd0 <main+0x2e0>)
 8000dac:	2000      	movs	r0, #0
 8000dae:	f005 fa4f 	bl	8006250 <f_mount>
			if(!(audioFlag&AUDIO_EOF)) {
 8000db2:	e72d      	b.n	8000c10 <main+0x120>
 8000db4:	0800718c 	.word	0x0800718c
 8000db8:	08007190 	.word	0x08007190
 8000dbc:	2000037c 	.word	0x2000037c
 8000dc0:	200002cc 	.word	0x200002cc
 8000dc4:	20000270 	.word	0x20000270
 8000dc8:	2000030c 	.word	0x2000030c
 8000dcc:	2000077c 	.word	0x2000077c
 8000dd0:	0800719c 	.word	0x0800719c

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b094      	sub	sp, #80	; 0x50
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dde:	2228      	movs	r2, #40	; 0x28
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f006 f9be 	bl	8007164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e04:	2309      	movs	r3, #9
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e12:	2301      	movs	r3, #1
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e16:	2301      	movs	r3, #1
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e24:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fe80 	bl	8001b34 <HAL_RCC_OscConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e3a:	f000 f96b 	bl	8001114 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	230f      	movs	r3, #15
 8000e40:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2102      	movs	r1, #2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 f8ea 	bl	8002034 <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e66:	f000 f955 	bl	8001114 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e72:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fa64 	bl	8002344 <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e82:	f000 f947 	bl	8001114 <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3750      	adds	r7, #80	; 0x50
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <MX_RTC_Init+0x30>)
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <MX_RTC_Init+0x34>)
 8000e98:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_RTC_Init+0x30>)
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ea0:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <MX_RTC_Init+0x30>)
 8000ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_RTC_Init+0x30>)
 8000eac:	f001 fbbc 	bl	8002628 <HAL_RTC_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000eb6:	f000 f92d 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000310 	.word	0x20000310
 8000ec4:	40002800 	.word	0x40002800

08000ec8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <MX_SPI1_Init+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000efc:	2210      	movs	r2, #16
 8000efe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f14:	220a      	movs	r2, #10
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_SPI1_Init+0x64>)
 8000f1a:	f001 fc98 	bl	800284e <HAL_SPI_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f24:	f000 f8f6 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000324 	.word	0x20000324
 8000f30:	40013000 	.word	0x40013000

08000f34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f3a:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <MX_SPI2_Init+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f80:	220a      	movs	r2, #10
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_SPI2_Init+0x64>)
 8000f86:	f001 fc62 	bl	800284e <HAL_SPI_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f90:	f000 f8c0 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000274 	.word	0x20000274
 8000f9c:	40003800 	.word	0x40003800

08000fa0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_TIM4_Init+0x94>)
 8000fbe:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <MX_TIM4_Init+0x98>)
 8000fc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_TIM4_Init+0x94>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_TIM4_Init+0x94>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1633;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_TIM4_Init+0x94>)
 8000fd0:	f240 6261 	movw	r2, #1633	; 0x661
 8000fd4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_TIM4_Init+0x94>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_TIM4_Init+0x94>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <MX_TIM4_Init+0x94>)
 8000fe4:	f001 ffff 	bl	8002fe6 <HAL_TIM_Base_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000fee:	f000 f891 	bl	8001114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_TIM4_Init+0x94>)
 8001000:	f002 f971 	bl	80032e6 <HAL_TIM_ConfigClockSource>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800100a:	f000 f883 	bl	8001114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <MX_TIM4_Init+0x94>)
 800101c:	f002 fb40 	bl	80036a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001026:	f000 f875 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200002cc 	.word	0x200002cc
 8001038:	40000800 	.word	0x40000800

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <MX_GPIO_Init+0xcc>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a2c      	ldr	r2, [pc, #176]	; (8001108 <MX_GPIO_Init+0xcc>)
 8001056:	f043 0310 	orr.w	r3, r3, #16
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <MX_GPIO_Init+0xcc>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <MX_GPIO_Init+0xcc>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <MX_GPIO_Init+0xcc>)
 800106e:	f043 0320 	orr.w	r3, r3, #32
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <MX_GPIO_Init+0xcc>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0320 	and.w	r3, r3, #32
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <MX_GPIO_Init+0xcc>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a20      	ldr	r2, [pc, #128]	; (8001108 <MX_GPIO_Init+0xcc>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <MX_GPIO_Init+0xcc>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_GPIO_Init+0xcc>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <MX_GPIO_Init+0xcc>)
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_GPIO_Init+0xcc>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b6:	4815      	ldr	r0, [pc, #84]	; (800110c <MX_GPIO_Init+0xd0>)
 80010b8:	f000 fd18 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	2110      	movs	r1, #16
 80010c0:	4813      	ldr	r0, [pc, #76]	; (8001110 <MX_GPIO_Init+0xd4>)
 80010c2:	f000 fd13 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	480b      	ldr	r0, [pc, #44]	; (800110c <MX_GPIO_Init+0xd0>)
 80010e0:	f000 fbaa 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80010e4:	2310      	movs	r3, #16
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4619      	mov	r1, r3
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_GPIO_Init+0xd4>)
 80010fc:	f000 fb9c 	bl	8001838 <HAL_GPIO_Init>

}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40021000 	.word	0x40021000
 800110c:	40011000 	.word	0x40011000
 8001110:	40010800 	.word	0x40010800

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_MspInit+0x5c>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a14      	ldr	r2, [pc, #80]	; (800117c <HAL_MspInit+0x5c>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6193      	str	r3, [r2, #24]
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_MspInit+0x5c>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_MspInit+0x5c>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <HAL_MspInit+0x5c>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	61d3      	str	r3, [r2, #28]
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_MspInit+0x5c>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_MspInit+0x60>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_MspInit+0x60>)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000

08001184 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <HAL_RTC_MspInit+0x3c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d110      	bne.n	80011b8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001196:	f000 fcc1 	bl	8001b1c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_RTC_MspInit+0x40>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <HAL_RTC_MspInit+0x40>)
 80011a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <HAL_RTC_MspInit+0x40>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_RTC_MspInit+0x44>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40002800 	.word	0x40002800
 80011c4:	40021000 	.word	0x40021000
 80011c8:	4242043c 	.word	0x4242043c

080011cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a31      	ldr	r2, [pc, #196]	; (80012ac <HAL_SPI_MspInit+0xe0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d130      	bne.n	800124e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ec:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <HAL_SPI_MspInit+0xe4>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a2f      	ldr	r2, [pc, #188]	; (80012b0 <HAL_SPI_MspInit+0xe4>)
 80011f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <HAL_SPI_MspInit+0xe4>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <HAL_SPI_MspInit+0xe4>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a29      	ldr	r2, [pc, #164]	; (80012b0 <HAL_SPI_MspInit+0xe4>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <HAL_SPI_MspInit+0xe4>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MOSI_Pin;
 800121c:	23a0      	movs	r3, #160	; 0xa0
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0318 	add.w	r3, r7, #24
 800122c:	4619      	mov	r1, r3
 800122e:	4821      	ldr	r0, [pc, #132]	; (80012b4 <HAL_SPI_MspInit+0xe8>)
 8001230:	f000 fb02 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_MISO_Pin;
 8001234:	2340      	movs	r3, #64	; 0x40
 8001236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0318 	add.w	r3, r7, #24
 8001244:	4619      	mov	r1, r3
 8001246:	481b      	ldr	r0, [pc, #108]	; (80012b4 <HAL_SPI_MspInit+0xe8>)
 8001248:	f000 faf6 	bl	8001838 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800124c:	e029      	b.n	80012a2 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_SPI_MspInit+0xec>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d124      	bne.n	80012a2 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_SPI_MspInit+0xe4>)
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <HAL_SPI_MspInit+0xe4>)
 800125e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001262:	61d3      	str	r3, [r2, #28]
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_SPI_MspInit+0xe4>)
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_SPI_MspInit+0xe4>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_SPI_MspInit+0xe4>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_SPI_MspInit+0xe4>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001288:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	4619      	mov	r1, r3
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <HAL_SPI_MspInit+0xf0>)
 800129e:	f000 facb 	bl	8001838 <HAL_GPIO_Init>
}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40013000 	.word	0x40013000
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010800 	.word	0x40010800
 80012b8:	40003800 	.word	0x40003800
 80012bc:	40010c00 	.word	0x40010c00

080012c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_TIM_Base_MspInit+0x44>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d113      	bne.n	80012fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_TIM_Base_MspInit+0x48>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <HAL_TIM_Base_MspInit+0x48>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_TIM_Base_MspInit+0x48>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	201e      	movs	r0, #30
 80012f0:	f000 fa6b 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012f4:	201e      	movs	r0, #30
 80012f6:	f000 fa84 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40000800 	.word	0x40000800
 8001308:	40021000 	.word	0x40021000

0800130c <SDTimer_Handler>:
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void) {
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	if (Timer1 > 0)
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <SDTimer_Handler+0x3c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <SDTimer_Handler+0x1c>
		Timer1--;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <SDTimer_Handler+0x3c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	3b01      	subs	r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <SDTimer_Handler+0x3c>)
 8001326:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <SDTimer_Handler+0x40>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <SDTimer_Handler+0x34>
		Timer2--;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <SDTimer_Handler+0x40>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	3b01      	subs	r3, #1
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <SDTimer_Handler+0x40>)
 800133e:	701a      	strb	r2, [r3, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000b7d 	.word	0x20000b7d
 800134c:	20000b7c 	.word	0x20000b7c

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <HardFault_Handler+0x4>

08001362 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <MemManage_Handler+0x4>

08001368 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <BusFault_Handler+0x4>

0800136e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <UsageFault_Handler+0x4>

08001374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <SysTick_Handler+0x30>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	3301      	adds	r3, #1
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <SysTick_Handler+0x30>)
 80013a8:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <SysTick_Handler+0x30>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b09      	cmp	r3, #9
 80013b2:	d904      	bls.n	80013be <SysTick_Handler+0x26>
		FatFsCnt = 0;
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Handler+0x30>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80013ba:	f7ff ffa7 	bl	800130c <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013be:	f000 f911 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000042 	.word	0x20000042

080013cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <TIM4_IRQHandler+0x14>)
 80013d2:	f001 fe80 	bl	80030d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

	sendSample();
 80013d6:	f000 f843 	bl	8001460 <sendSample>

  /* USER CODE END TIM4_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002cc 	.word	0x200002cc

080013e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <SystemInit+0x5c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a14      	ldr	r2, [pc, #80]	; (8001440 <SystemInit+0x5c>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <SystemInit+0x5c>)
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4911      	ldr	r1, [pc, #68]	; (8001440 <SystemInit+0x5c>)
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <SystemInit+0x60>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <SystemInit+0x5c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <SystemInit+0x5c>)
 8001406:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800140a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <SystemInit+0x5c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SystemInit+0x5c>)
 8001416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <SystemInit+0x5c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <SystemInit+0x5c>)
 8001422:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001426:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SystemInit+0x5c>)
 800142a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800142e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SystemInit+0x64>)
 8001432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001436:	609a      	str	r2, [r3, #8]
#endif 
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	40021000 	.word	0x40021000
 8001444:	f8ff0000 	.word	0xf8ff0000
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <fixWave>:
 */
#include "wave.h"
#include <stdint.h>
#include <string.h>

void fixWave(Wave* w){
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	__builtin_bswap32(w->sampleRate);
	__builtin_bswap32(w->byteRate);
	//bswap16(w->blockAlign);
	//bswap16(w->bitsPerSample);
	__builtin_bswap32(w->sub2Size);
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
	...

08001460 <sendSample>:

void sendSample(){
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	//sends a sample to the DAC

	//load sample into nextVal
	int16_t nextVal = audioBuffer[audioDataInd];
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <sendSample+0x98>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a24      	ldr	r2, [pc, #144]	; (80014fc <sendSample+0x9c>)
 800146c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001470:	80fb      	strh	r3, [r7, #6]
	//divide by 16 to convert signed 16 bit to signed 12 bit
	nextVal /= 16;
 8001472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001476:	2b00      	cmp	r3, #0
 8001478:	da00      	bge.n	800147c <sendSample+0x1c>
 800147a:	330f      	adds	r3, #15
 800147c:	111b      	asrs	r3, r3, #4
 800147e:	80fb      	strh	r3, [r7, #6]
	//make unsigned 12 bit and add option bits for DAC
	nextVal = (nextVal+(1<<11))&4095;
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001486:	b29b      	uxth	r3, r3
 8001488:	b21b      	sxth	r3, r3
 800148a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148e:	80fb      	strh	r3, [r7, #6]

	HAL_SPI_Transmit(&hspi2, &audioBuffer[audioDataInd], 2, -1);	//TODO: change timeout value, add error checking
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <sendSample+0x98>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4a19      	ldr	r2, [pc, #100]	; (80014fc <sendSample+0x9c>)
 8001498:	1899      	adds	r1, r3, r2
 800149a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800149e:	2202      	movs	r2, #2
 80014a0:	4817      	ldr	r0, [pc, #92]	; (8001500 <sendSample+0xa0>)
 80014a2:	f001 fa35 	bl	8002910 <HAL_SPI_Transmit>
	audioDataInd++;
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <sendSample+0x98>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <sendSample+0x98>)
 80014ae:	6013      	str	r3, [r2, #0]
	if(audioDataInd >= AUDIO_BUFFER_SIZE) {
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <sendSample+0x98>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b8:	d30c      	bcc.n	80014d4 <sendSample+0x74>
		if(audioFlag&AUDIO_EOF) HAL_TIM_Base_Stop_IT(&htim4);
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <sendSample+0xa4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <sendSample+0x6c>
 80014c6:	4810      	ldr	r0, [pc, #64]	; (8001508 <sendSample+0xa8>)
 80014c8:	f001 fddb 	bl	8003082 <HAL_TIM_Base_Stop_IT>
		audioDataInd = 0;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <sendSample+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
	}
	else if(audioDataInd == AUDIO_BUFFER_SIZE/2) {
		if(audioFlag&AUDIO_EOF) HAL_TIM_Base_Stop_IT(&htim4);
	}

}
 80014d2:	e00d      	b.n	80014f0 <sendSample+0x90>
	else if(audioDataInd == AUDIO_BUFFER_SIZE/2) {
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <sendSample+0x98>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014dc:	d108      	bne.n	80014f0 <sendSample+0x90>
		if(audioFlag&AUDIO_EOF) HAL_TIM_Base_Stop_IT(&htim4);
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <sendSample+0xa4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <sendSample+0x90>
 80014ea:	4807      	ldr	r0, [pc, #28]	; (8001508 <sendSample+0xa8>)
 80014ec:	f001 fdc9 	bl	8003082 <HAL_TIM_Base_Stop_IT>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000030c 	.word	0x2000030c
 80014fc:	2000037c 	.word	0x2000037c
 8001500:	20000274 	.word	0x20000274
 8001504:	20000270 	.word	0x20000270
 8001508:	200002cc 	.word	0x200002cc

0800150c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800150c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800150e:	e003      	b.n	8001518 <LoopCopyDataInit>

08001510 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001512:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001514:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001516:	3104      	adds	r1, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001518:	480a      	ldr	r0, [pc, #40]	; (8001544 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800151c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001520:	d3f6      	bcc.n	8001510 <CopyDataInit>
  ldr r2, =_sbss
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001524:	e002      	b.n	800152c <LoopFillZerobss>

08001526 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001528:	f842 3b04 	str.w	r3, [r2], #4

0800152c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800152e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001530:	d3f9      	bcc.n	8001526 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001532:	f7ff ff57 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f005 fdf1 	bl	800711c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153a:	f7ff fad9 	bl	8000af0 <main>
  bx lr
 800153e:	4770      	bx	lr
  ldr r3, =_sidata
 8001540:	08007780 	.word	0x08007780
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001548:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 800154c:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8001550:	20002be8 	.word	0x20002be8

08001554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC1_2_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_Init+0x28>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_Init+0x28>)
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 f923 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	2000      	movs	r0, #0
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff fdd4 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f93b 	bl	800181e <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c0:	f000 f903 	bl	80017ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000004 	.word	0x20000004
 80015dc:	2000000c 	.word	0x2000000c
 80015e0:	20000008 	.word	0x20000008

080015e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_IncTick+0x1c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x20>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <HAL_IncTick+0x20>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	2000000c 	.word	0x2000000c
 8001604:	20000b80 	.word	0x20000b80

08001608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <HAL_GetTick+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000b80 	.word	0x20000b80

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4906      	ldr	r1, [pc, #24]	; (80016b4 <__NVIC_EnableIRQ+0x34>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001780:	d301      	bcc.n	8001786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <SysTick_Config+0x40>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178e:	210f      	movs	r1, #15
 8001790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001794:	f7ff ff90 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SysTick_Config+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SysTick_Config+0x40>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff2d 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff42 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff90 	bl	800170c <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5f 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff35 	bl	8001680 <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa2 	bl	8001770 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b08b      	sub	sp, #44	; 0x2c
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184a:	e127      	b.n	8001a9c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800184c:	2201      	movs	r2, #1
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 8116 	bne.w	8001a96 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b12      	cmp	r3, #18
 8001870:	d034      	beq.n	80018dc <HAL_GPIO_Init+0xa4>
 8001872:	2b12      	cmp	r3, #18
 8001874:	d80d      	bhi.n	8001892 <HAL_GPIO_Init+0x5a>
 8001876:	2b02      	cmp	r3, #2
 8001878:	d02b      	beq.n	80018d2 <HAL_GPIO_Init+0x9a>
 800187a:	2b02      	cmp	r3, #2
 800187c:	d804      	bhi.n	8001888 <HAL_GPIO_Init+0x50>
 800187e:	2b00      	cmp	r3, #0
 8001880:	d031      	beq.n	80018e6 <HAL_GPIO_Init+0xae>
 8001882:	2b01      	cmp	r3, #1
 8001884:	d01c      	beq.n	80018c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001886:	e048      	b.n	800191a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001888:	2b03      	cmp	r3, #3
 800188a:	d043      	beq.n	8001914 <HAL_GPIO_Init+0xdc>
 800188c:	2b11      	cmp	r3, #17
 800188e:	d01b      	beq.n	80018c8 <HAL_GPIO_Init+0x90>
          break;
 8001890:	e043      	b.n	800191a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001892:	4a89      	ldr	r2, [pc, #548]	; (8001ab8 <HAL_GPIO_Init+0x280>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d026      	beq.n	80018e6 <HAL_GPIO_Init+0xae>
 8001898:	4a87      	ldr	r2, [pc, #540]	; (8001ab8 <HAL_GPIO_Init+0x280>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d806      	bhi.n	80018ac <HAL_GPIO_Init+0x74>
 800189e:	4a87      	ldr	r2, [pc, #540]	; (8001abc <HAL_GPIO_Init+0x284>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d020      	beq.n	80018e6 <HAL_GPIO_Init+0xae>
 80018a4:	4a86      	ldr	r2, [pc, #536]	; (8001ac0 <HAL_GPIO_Init+0x288>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d01d      	beq.n	80018e6 <HAL_GPIO_Init+0xae>
          break;
 80018aa:	e036      	b.n	800191a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018ac:	4a85      	ldr	r2, [pc, #532]	; (8001ac4 <HAL_GPIO_Init+0x28c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d019      	beq.n	80018e6 <HAL_GPIO_Init+0xae>
 80018b2:	4a85      	ldr	r2, [pc, #532]	; (8001ac8 <HAL_GPIO_Init+0x290>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d016      	beq.n	80018e6 <HAL_GPIO_Init+0xae>
 80018b8:	4a84      	ldr	r2, [pc, #528]	; (8001acc <HAL_GPIO_Init+0x294>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d013      	beq.n	80018e6 <HAL_GPIO_Init+0xae>
          break;
 80018be:	e02c      	b.n	800191a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	623b      	str	r3, [r7, #32]
          break;
 80018c6:	e028      	b.n	800191a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	3304      	adds	r3, #4
 80018ce:	623b      	str	r3, [r7, #32]
          break;
 80018d0:	e023      	b.n	800191a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	3308      	adds	r3, #8
 80018d8:	623b      	str	r3, [r7, #32]
          break;
 80018da:	e01e      	b.n	800191a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	330c      	adds	r3, #12
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e019      	b.n	800191a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ee:	2304      	movs	r3, #4
 80018f0:	623b      	str	r3, [r7, #32]
          break;
 80018f2:	e012      	b.n	800191a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d105      	bne.n	8001908 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018fc:	2308      	movs	r3, #8
 80018fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	611a      	str	r2, [r3, #16]
          break;
 8001906:	e008      	b.n	800191a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001908:	2308      	movs	r3, #8
 800190a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	615a      	str	r2, [r3, #20]
          break;
 8001912:	e002      	b.n	800191a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	2bff      	cmp	r3, #255	; 0xff
 800191e:	d801      	bhi.n	8001924 <HAL_GPIO_Init+0xec>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	e001      	b.n	8001928 <HAL_GPIO_Init+0xf0>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3304      	adds	r3, #4
 8001928:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2bff      	cmp	r3, #255	; 0xff
 800192e:	d802      	bhi.n	8001936 <HAL_GPIO_Init+0xfe>
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	e002      	b.n	800193c <HAL_GPIO_Init+0x104>
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	3b08      	subs	r3, #8
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	210f      	movs	r1, #15
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	401a      	ands	r2, r3
 800194e:	6a39      	ldr	r1, [r7, #32]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	431a      	orrs	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8096 	beq.w	8001a96 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800196a:	4b59      	ldr	r3, [pc, #356]	; (8001ad0 <HAL_GPIO_Init+0x298>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a58      	ldr	r2, [pc, #352]	; (8001ad0 <HAL_GPIO_Init+0x298>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6193      	str	r3, [r2, #24]
 8001976:	4b56      	ldr	r3, [pc, #344]	; (8001ad0 <HAL_GPIO_Init+0x298>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001982:	4a54      	ldr	r2, [pc, #336]	; (8001ad4 <HAL_GPIO_Init+0x29c>)
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_GPIO_Init+0x2a0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x19e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4a      	ldr	r2, [pc, #296]	; (8001adc <HAL_GPIO_Init+0x2a4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x19a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <HAL_GPIO_Init+0x2a8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x196>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a48      	ldr	r2, [pc, #288]	; (8001ae4 <HAL_GPIO_Init+0x2ac>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x192>
 80019c6:	2303      	movs	r3, #3
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x1a0>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x1a0>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x1a0>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x1a0>
 80019d6:	2300      	movs	r3, #0
 80019d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019da:	f002 0203 	and.w	r2, r2, #3
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4093      	lsls	r3, r2
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019e8:	493a      	ldr	r1, [pc, #232]	; (8001ad4 <HAL_GPIO_Init+0x29c>)
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a02:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4938      	ldr	r1, [pc, #224]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
 8001a0e:	e006      	b.n	8001a1e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a10:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	4933      	ldr	r1, [pc, #204]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	492e      	ldr	r1, [pc, #184]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
 8001a36:	e006      	b.n	8001a46 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	4929      	ldr	r1, [pc, #164]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a52:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	4924      	ldr	r1, [pc, #144]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
 8001a5e:	e006      	b.n	8001a6e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	491f      	ldr	r1, [pc, #124]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	491a      	ldr	r1, [pc, #104]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60cb      	str	r3, [r1, #12]
 8001a86:	e006      	b.n	8001a96 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	4915      	ldr	r1, [pc, #84]	; (8001ae8 <HAL_GPIO_Init+0x2b0>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	3301      	adds	r3, #1
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f47f aed0 	bne.w	800184c <HAL_GPIO_Init+0x14>
  }
}
 8001aac:	bf00      	nop
 8001aae:	372c      	adds	r7, #44	; 0x2c
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	10210000 	.word	0x10210000
 8001abc:	10110000 	.word	0x10110000
 8001ac0:	10120000 	.word	0x10120000
 8001ac4:	10310000 	.word	0x10310000
 8001ac8:	10320000 	.word	0x10320000
 8001acc:	10220000 	.word	0x10220000
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	40010800 	.word	0x40010800
 8001adc:	40010c00 	.word	0x40010c00
 8001ae0:	40011000 	.word	0x40011000
 8001ae4:	40011400 	.word	0x40011400
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	420e0020 	.word	0x420e0020

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e26c      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8087 	beq.w	8001c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b54:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d00c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b60:	4b8f      	ldr	r3, [pc, #572]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d112      	bne.n	8001b92 <HAL_RCC_OscConfig+0x5e>
 8001b6c:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b78:	d10b      	bne.n	8001b92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7a:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d06c      	beq.n	8001c60 <HAL_RCC_OscConfig+0x12c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d168      	bne.n	8001c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e246      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x76>
 8001b9c:	4b80      	ldr	r3, [pc, #512]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a7f      	ldr	r2, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e02e      	b.n	8001c08 <HAL_RCC_OscConfig+0xd4>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x98>
 8001bb2:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a7a      	ldr	r2, [pc, #488]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a77      	ldr	r2, [pc, #476]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e01d      	b.n	8001c08 <HAL_RCC_OscConfig+0xd4>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xbc>
 8001bd6:	4b72      	ldr	r3, [pc, #456]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a71      	ldr	r2, [pc, #452]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0xd4>
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a6a      	ldr	r2, [pc, #424]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b68      	ldr	r3, [pc, #416]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a67      	ldr	r2, [pc, #412]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fcfa 	bl	8001608 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff fcf6 	bl	8001608 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e1fa      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0xe4>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fce6 	bl	8001608 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fce2 	bl	8001608 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1e6      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x10c>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d063      	beq.n	8001d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6e:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c7a:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d11c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x18c>
 8001c86:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d116      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_RCC_OscConfig+0x176>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e1ba      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4939      	ldr	r1, [pc, #228]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	e03a      	b.n	8001d36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc8:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7ff fc9b 	bl	8001608 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fc97 	bl	8001608 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e19b      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4927      	ldr	r1, [pc, #156]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e015      	b.n	8001d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fc7a 	bl	8001608 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d18:	f7ff fc76 	bl	8001608 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e17a      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d03a      	beq.n	8001db8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d019      	beq.n	8001d7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7ff fc5a 	bl	8001608 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff fc56 	bl	8001608 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e15a      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f000 fac6 	bl	8002308 <RCC_Delay>
 8001d7c:	e01c      	b.n	8001db8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7ff fc40 	bl	8001608 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8a:	e00f      	b.n	8001dac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fc3c 	bl	8001608 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d908      	bls.n	8001dac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e140      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	42420000 	.word	0x42420000
 8001da8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	4b9e      	ldr	r3, [pc, #632]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1e9      	bne.n	8001d8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80a6 	beq.w	8001f12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dca:	4b97      	ldr	r3, [pc, #604]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10d      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b94      	ldr	r3, [pc, #592]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a93      	ldr	r2, [pc, #588]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	61d3      	str	r3, [r2, #28]
 8001de2:	4b91      	ldr	r3, [pc, #580]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b8e      	ldr	r3, [pc, #568]	; (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d118      	bne.n	8001e30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfe:	4b8b      	ldr	r3, [pc, #556]	; (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a8a      	ldr	r2, [pc, #552]	; (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fbfd 	bl	8001608 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e12:	f7ff fbf9 	bl	8001608 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b64      	cmp	r3, #100	; 0x64
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0fd      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	4b81      	ldr	r3, [pc, #516]	; (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x312>
 8001e38:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4a7a      	ldr	r2, [pc, #488]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6213      	str	r3, [r2, #32]
 8001e44:	e02d      	b.n	8001ea2 <HAL_RCC_OscConfig+0x36e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x334>
 8001e4e:	4b76      	ldr	r3, [pc, #472]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4a75      	ldr	r2, [pc, #468]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6213      	str	r3, [r2, #32]
 8001e5a:	4b73      	ldr	r3, [pc, #460]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a72      	ldr	r2, [pc, #456]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	e01c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x36e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d10c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x356>
 8001e70:	4b6d      	ldr	r3, [pc, #436]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a6c      	ldr	r2, [pc, #432]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a69      	ldr	r2, [pc, #420]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	e00b      	b.n	8001ea2 <HAL_RCC_OscConfig+0x36e>
 8001e8a:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a66      	ldr	r2, [pc, #408]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	4b64      	ldr	r3, [pc, #400]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a63      	ldr	r2, [pc, #396]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 0304 	bic.w	r3, r3, #4
 8001ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d015      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fbad 	bl	8001608 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7ff fba9 	bl	8001608 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e0ab      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	4b57      	ldr	r3, [pc, #348]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ee      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x37e>
 8001ed4:	e014      	b.n	8001f00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fb97 	bl	8001608 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff fb93 	bl	8001608 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e095      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef4:	4b4c      	ldr	r3, [pc, #304]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1ee      	bne.n	8001ede <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f06:	4b48      	ldr	r3, [pc, #288]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a47      	ldr	r2, [pc, #284]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8081 	beq.w	800201e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1c:	4b42      	ldr	r3, [pc, #264]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d061      	beq.n	8001fec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d146      	bne.n	8001fbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <HAL_RCC_OscConfig+0x4fc>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff fb67 	bl	8001608 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7ff fb63 	bl	8001608 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e067      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f50:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d108      	bne.n	8001f78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f66:	4b30      	ldr	r3, [pc, #192]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	492d      	ldr	r1, [pc, #180]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a19      	ldr	r1, [r3, #32]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	4927      	ldr	r1, [pc, #156]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_OscConfig+0x4fc>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7ff fb37 	bl	8001608 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7ff fb33 	bl	8001608 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e037      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x46a>
 8001fbc:	e02f      	b.n	800201e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_RCC_OscConfig+0x4fc>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fb20 	bl	8001608 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7ff fb1c 	bl	8001608 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e020      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x498>
 8001fea:	e018      	b.n	800201e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e013      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	429a      	cmp	r2, r3
 800200a:	d106      	bne.n	800201a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000
 8002030:	42420060 	.word	0x42420060

08002034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0d0      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b6a      	ldr	r3, [pc, #424]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d910      	bls.n	8002078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b67      	ldr	r3, [pc, #412]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4965      	ldr	r1, [pc, #404]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0b8      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d020      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800209a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b4:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	494d      	ldr	r1, [pc, #308]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d040      	beq.n	8002154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d115      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e07f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e073      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b3d      	ldr	r3, [pc, #244]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e06b      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002112:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f023 0203 	bic.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4936      	ldr	r1, [pc, #216]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002124:	f7ff fa70 	bl	8001608 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	e00a      	b.n	8002142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	f7ff fa6c 	bl	8001608 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e053      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 020c 	and.w	r2, r3, #12
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d1eb      	bne.n	800212c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d210      	bcs.n	8002184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 0207 	bic.w	r2, r3, #7
 800216a:	4922      	ldr	r1, [pc, #136]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e032      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4916      	ldr	r1, [pc, #88]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	490e      	ldr	r1, [pc, #56]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021c2:	f000 f821 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021c6:	4601      	mov	r1, r0
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	fa21 f303 	lsr.w	r3, r1, r3
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1cc>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1d0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f9ce 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40022000 	.word	0x40022000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08007210 	.word	0x08007210
 8002200:	20000004 	.word	0x20000004
 8002204:	20000008 	.word	0x20000008

08002208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	b490      	push	{r4, r7}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002210:	1d3c      	adds	r4, r7, #4
 8002212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002218:	4b28      	ldr	r3, [pc, #160]	; (80022bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002232:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b04      	cmp	r3, #4
 8002240:	d002      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x40>
 8002242:	2b08      	cmp	r3, #8
 8002244:	d003      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x46>
 8002246:	e02d      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002248:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800224a:	623b      	str	r3, [r7, #32]
      break;
 800224c:	e02d      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800225a:	4413      	add	r3, r2
 800225c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002260:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d013      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	0c5b      	lsrs	r3, r3, #17
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800227a:	4413      	add	r3, r2
 800227c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002280:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002286:	fb02 f203 	mul.w	r2, r2, r3
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	e004      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002298:	fb02 f303 	mul.w	r3, r2, r3
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	623b      	str	r3, [r7, #32]
      break;
 80022a2:	e002      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022aa:	6a3b      	ldr	r3, [r7, #32]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3728      	adds	r7, #40	; 0x28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc90      	pop	{r4, r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	080071a0 	.word	0x080071a0
 80022bc:	080071b0 	.word	0x080071b0
 80022c0:	40021000 	.word	0x40021000
 80022c4:	007a1200 	.word	0x007a1200
 80022c8:	003d0900 	.word	0x003d0900

080022cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d0:	4b02      	ldr	r3, [pc, #8]	; (80022dc <HAL_RCC_GetHCLKFreq+0x10>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	20000004 	.word	0x20000004

080022e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022e4:	f7ff fff2 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 80022e8:	4601      	mov	r1, r0
 80022ea:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	0adb      	lsrs	r3, r3, #11
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	4a03      	ldr	r2, [pc, #12]	; (8002304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	08007220 	.word	0x08007220

08002308 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <RCC_Delay+0x34>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <RCC_Delay+0x38>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	0a5b      	lsrs	r3, r3, #9
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002324:	bf00      	nop
  }
  while (Delay --);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e5a      	subs	r2, r3, #1
 800232a:	60fa      	str	r2, [r7, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f9      	bne.n	8002324 <RCC_Delay+0x1c>
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000004 	.word	0x20000004
 8002340:	10624dd3 	.word	0x10624dd3

08002344 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d07d      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002364:	4b4f      	ldr	r3, [pc, #316]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	4a4b      	ldr	r2, [pc, #300]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	61d3      	str	r3, [r2, #28]
 800237c:	4b49      	ldr	r3, [pc, #292]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002388:	2301      	movs	r3, #1
 800238a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b46      	ldr	r3, [pc, #280]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d118      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002398:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a42      	ldr	r2, [pc, #264]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a4:	f7ff f930 	bl	8001608 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023aa:	e008      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7ff f92c 	bl	8001608 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e06d      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ca:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d02e      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d027      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023e8:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023f2:	4b2e      	ldr	r3, [pc, #184]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023f8:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023fe:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d014      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7ff f8fb 	bl	8001608 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	e00a      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7ff f8f7 	bl	8001608 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e036      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ee      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4917      	ldr	r1, [pc, #92]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002446:	4313      	orrs	r3, r2
 8002448:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4a13      	ldr	r2, [pc, #76]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002468:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	490b      	ldr	r1, [pc, #44]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	4904      	ldr	r1, [pc, #16]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40007000 	.word	0x40007000
 80024ac:	42420440 	.word	0x42420440

080024b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b08d      	sub	sp, #52	; 0x34
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024b8:	4b55      	ldr	r3, [pc, #340]	; (8002610 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80024ba:	f107 040c 	add.w	r4, r7, #12
 80024be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024c4:	4b53      	ldr	r3, [pc, #332]	; (8002614 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
 80024ce:	2300      	movs	r3, #0
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d2:	2300      	movs	r3, #0
 80024d4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	2300      	movs	r3, #0
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d07f      	beq.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d002      	beq.n	80024ee <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d048      	beq.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80024ec:	e08b      	b.n	8002606 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80024ee:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80024f4:	4b48      	ldr	r3, [pc, #288]	; (8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d07f      	beq.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	0c9b      	lsrs	r3, r3, #18
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800250c:	4413      	add	r3, r2
 800250e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002512:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d018      	beq.n	8002550 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800251e:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	0c5b      	lsrs	r3, r3, #17
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800252c:	4413      	add	r3, r2
 800252e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00d      	beq.n	800255a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800253e:	4a37      	ldr	r2, [pc, #220]	; (800261c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	fbb2 f2f3 	udiv	r2, r2, r3
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254e:	e004      	b.n	800255a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	4a33      	ldr	r2, [pc, #204]	; (8002620 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800255a:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002566:	d102      	bne.n	800256e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800256c:	e048      	b.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4a2c      	ldr	r2, [pc, #176]	; (8002624 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	085b      	lsrs	r3, r3, #1
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800257c:	e040      	b.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800257e:	4b26      	ldr	r3, [pc, #152]	; (8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258e:	d108      	bne.n	80025a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800259a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a0:	e01f      	b.n	80025e2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ac:	d109      	bne.n	80025c2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80025ba:	f649 4340 	movw	r3, #40000	; 0x9c40
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c0:	e00f      	b.n	80025e2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025cc:	d11a      	bne.n	8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d014      	beq.n	8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80025da:	f24f 4324 	movw	r3, #62500	; 0xf424
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025e0:	e010      	b.n	8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80025e2:	e00f      	b.n	8002604 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80025e4:	f7ff fe7c 	bl	80022e0 <HAL_RCC_GetPCLK2Freq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	0b9b      	lsrs	r3, r3, #14
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	3301      	adds	r3, #1
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025fe:	e002      	b.n	8002606 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002600:	bf00      	nop
 8002602:	e000      	b.n	8002606 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002604:	bf00      	nop
    }
  }
  return (frequency);
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002608:	4618      	mov	r0, r3
 800260a:	3734      	adds	r7, #52	; 0x34
 800260c:	46bd      	mov	sp, r7
 800260e:	bd90      	pop	{r4, r7, pc}
 8002610:	080071b4 	.word	0x080071b4
 8002614:	080071c4 	.word	0x080071c4
 8002618:	40021000 	.word	0x40021000
 800261c:	007a1200 	.word	0x007a1200
 8002620:	003d0900 	.word	0x003d0900
 8002624:	aaaaaaab 	.word	0xaaaaaaab

08002628 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e084      	b.n	8002748 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7c5b      	ldrb	r3, [r3, #17]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fd98 	bl	8001184 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f87a 	bl	8002754 <HAL_RTC_WaitForSynchro>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d004      	beq.n	8002670 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2204      	movs	r2, #4
 800266a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e06b      	b.n	8002748 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f89c 	bl	80027ae <RTC_EnterInitMode>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2204      	movs	r2, #4
 8002680:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e060      	b.n	8002748 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0207 	bic.w	r2, r2, #7
 8002694:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <HAL_RTC_Init+0x128>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a2b      	ldr	r2, [pc, #172]	; (8002750 <HAL_RTC_Init+0x128>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80026aa:	4b29      	ldr	r3, [pc, #164]	; (8002750 <HAL_RTC_Init+0x128>)
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	4926      	ldr	r1, [pc, #152]	; (8002750 <HAL_RTC_Init+0x128>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c4:	d003      	beq.n	80026ce <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	e00e      	b.n	80026ec <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f7ff feee 	bl	80024b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80026d4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d104      	bne.n	80026e6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2204      	movs	r2, #4
 80026e0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e030      	b.n	8002748 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 010f 	bic.w	r1, r3, #15
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	0c1a      	lsrs	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	b291      	uxth	r1, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	430b      	orrs	r3, r1
 8002716:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f870 	bl	80027fe <RTC_ExitInitMode>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2204      	movs	r2, #4
 8002728:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e00c      	b.n	8002748 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002746:	2300      	movs	r3, #0
  }
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40006c00 	.word	0x40006c00

08002754 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e01d      	b.n	80027a6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0208 	bic.w	r2, r2, #8
 8002778:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800277a:	f7fe ff45 	bl	8001608 <HAL_GetTick>
 800277e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002780:	e009      	b.n	8002796 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002782:	f7fe ff41 	bl	8001608 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002790:	d901      	bls.n	8002796 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e007      	b.n	80027a6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0ee      	beq.n	8002782 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80027ba:	f7fe ff25 	bl	8001608 <HAL_GetTick>
 80027be:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80027c0:	e009      	b.n	80027d6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80027c2:	f7fe ff21 	bl	8001608 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d0:	d901      	bls.n	80027d6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e00f      	b.n	80027f6 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ee      	beq.n	80027c2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0210 	orr.w	r2, r2, #16
 80027f2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0210 	bic.w	r2, r2, #16
 8002818:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800281a:	f7fe fef5 	bl	8001608 <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002820:	e009      	b.n	8002836 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002822:	f7fe fef1 	bl	8001608 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002830:	d901      	bls.n	8002836 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e007      	b.n	8002846 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ee      	beq.n	8002822 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e053      	b.n	8002908 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fca6 	bl	80011cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002896:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	ea42 0103 	orr.w	r1, r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	0c1a      	lsrs	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f002 0204 	and.w	r2, r2, #4
 80028e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_SPI_Transmit+0x22>
 800292e:	2302      	movs	r3, #2
 8002930:	e11e      	b.n	8002b70 <HAL_SPI_Transmit+0x260>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800293a:	f7fe fe65 	bl	8001608 <HAL_GetTick>
 800293e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d002      	beq.n	8002956 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002950:	2302      	movs	r3, #2
 8002952:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002954:	e103      	b.n	8002b5e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_SPI_Transmit+0x52>
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002966:	e0fa      	b.n	8002b5e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2203      	movs	r2, #3
 800296c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	88fa      	ldrh	r2, [r7, #6]
 8002980:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	88fa      	ldrh	r2, [r7, #6]
 8002986:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ae:	d107      	bne.n	80029c0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d007      	beq.n	80029de <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e6:	d14b      	bne.n	8002a80 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_SPI_Transmit+0xe6>
 80029f0:	8afb      	ldrh	r3, [r7, #22]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d13e      	bne.n	8002a74 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	881a      	ldrh	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	1c9a      	adds	r2, r3, #2
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a1a:	e02b      	b.n	8002a74 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d112      	bne.n	8002a50 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	881a      	ldrh	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	1c9a      	adds	r2, r3, #2
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a4e:	e011      	b.n	8002a74 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a50:	f7fe fdda 	bl	8001608 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d803      	bhi.n	8002a68 <HAL_SPI_Transmit+0x158>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a66:	d102      	bne.n	8002a6e <HAL_SPI_Transmit+0x15e>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a72:	e074      	b.n	8002b5e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1ce      	bne.n	8002a1c <HAL_SPI_Transmit+0x10c>
 8002a7e:	e04c      	b.n	8002b1a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_SPI_Transmit+0x17e>
 8002a88:	8afb      	ldrh	r3, [r7, #22]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d140      	bne.n	8002b10 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	7812      	ldrb	r2, [r2, #0]
 8002a9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ab4:	e02c      	b.n	8002b10 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d113      	bne.n	8002aec <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	330c      	adds	r3, #12
 8002ace:	7812      	ldrb	r2, [r2, #0]
 8002ad0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002aea:	e011      	b.n	8002b10 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aec:	f7fe fd8c 	bl	8001608 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d803      	bhi.n	8002b04 <HAL_SPI_Transmit+0x1f4>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b02:	d102      	bne.n	8002b0a <HAL_SPI_Transmit+0x1fa>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b0e:	e026      	b.n	8002b5e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1cd      	bne.n	8002ab6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	6839      	ldr	r1, [r7, #0]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 fa43 	bl	8002faa <SPI_EndRxTxTransaction>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	77fb      	strb	r3, [r7, #31]
 8002b5a:	e000      	b.n	8002b5e <HAL_SPI_Transmit+0x24e>
  }

error:
 8002b5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08c      	sub	sp, #48	; 0x30
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b86:	2301      	movs	r3, #1
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_SPI_TransmitReceive+0x26>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e18a      	b.n	8002eb4 <HAL_SPI_TransmitReceive+0x33c>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ba6:	f7fe fd2f 	bl	8001608 <HAL_GetTick>
 8002baa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d00f      	beq.n	8002be8 <HAL_SPI_TransmitReceive+0x70>
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bce:	d107      	bne.n	8002be0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d103      	bne.n	8002be0 <HAL_SPI_TransmitReceive+0x68>
 8002bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d003      	beq.n	8002be8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002be0:	2302      	movs	r3, #2
 8002be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002be6:	e15b      	b.n	8002ea0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_SPI_TransmitReceive+0x82>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_SPI_TransmitReceive+0x82>
 8002bf4:	887b      	ldrh	r3, [r7, #2]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d103      	bne.n	8002c02 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c00:	e14e      	b.n	8002ea0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d003      	beq.n	8002c16 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2205      	movs	r2, #5
 8002c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	887a      	ldrh	r2, [r7, #2]
 8002c26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	887a      	ldrh	r2, [r7, #2]
 8002c3e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d007      	beq.n	8002c6a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c72:	d178      	bne.n	8002d66 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_SPI_TransmitReceive+0x10a>
 8002c7c:	8b7b      	ldrh	r3, [r7, #26]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d166      	bne.n	8002d50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	881a      	ldrh	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	1c9a      	adds	r2, r3, #2
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ca6:	e053      	b.n	8002d50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d11b      	bne.n	8002cee <HAL_SPI_TransmitReceive+0x176>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d016      	beq.n	8002cee <HAL_SPI_TransmitReceive+0x176>
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d113      	bne.n	8002cee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	881a      	ldrh	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	1c9a      	adds	r2, r3, #2
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d119      	bne.n	8002d30 <HAL_SPI_TransmitReceive+0x1b8>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d014      	beq.n	8002d30 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	b292      	uxth	r2, r2
 8002d12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	1c9a      	adds	r2, r3, #2
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d30:	f7fe fc6a 	bl	8001608 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d807      	bhi.n	8002d50 <HAL_SPI_TransmitReceive+0x1d8>
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d46:	d003      	beq.n	8002d50 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d4e:	e0a7      	b.n	8002ea0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1a6      	bne.n	8002ca8 <HAL_SPI_TransmitReceive+0x130>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1a1      	bne.n	8002ca8 <HAL_SPI_TransmitReceive+0x130>
 8002d64:	e07c      	b.n	8002e60 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_SPI_TransmitReceive+0x1fc>
 8002d6e:	8b7b      	ldrh	r3, [r7, #26]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d16b      	bne.n	8002e4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	7812      	ldrb	r2, [r2, #0]
 8002d80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d9a:	e057      	b.n	8002e4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d11c      	bne.n	8002de4 <HAL_SPI_TransmitReceive+0x26c>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d017      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x26c>
 8002db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d114      	bne.n	8002de4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d119      	bne.n	8002e26 <HAL_SPI_TransmitReceive+0x2ae>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d014      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e22:	2301      	movs	r3, #1
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e26:	f7fe fbef 	bl	8001608 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d803      	bhi.n	8002e3e <HAL_SPI_TransmitReceive+0x2c6>
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e3c:	d102      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x2cc>
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d103      	bne.n	8002e4c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e4a:	e029      	b.n	8002ea0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1a2      	bne.n	8002d9c <HAL_SPI_TransmitReceive+0x224>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d19d      	bne.n	8002d9c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f8a0 	bl	8002faa <SPI_EndRxTxTransaction>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d006      	beq.n	8002e7e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e7c:	e010      	b.n	8002ea0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	e000      	b.n	8002ea0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002eb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3730      	adds	r7, #48	; 0x30
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eca:	b2db      	uxtb	r3, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ee6:	e04c      	b.n	8002f82 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eee:	d048      	beq.n	8002f82 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002ef0:	f7fe fb8a 	bl	8001608 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d902      	bls.n	8002f06 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d13d      	bne.n	8002f82 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f1e:	d111      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f28:	d004      	beq.n	8002f34 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f32:	d107      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4c:	d10f      	bne.n	8002f6e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e00f      	b.n	8002fa2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	bf0c      	ite	eq
 8002f92:	2301      	moveq	r3, #1
 8002f94:	2300      	movne	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1a3      	bne.n	8002ee8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af02      	add	r7, sp, #8
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff ff88 	bl	8002ed6 <SPI_WaitFlagStateUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e000      	b.n	8002fde <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e01d      	b.n	8003034 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7fe f957 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3304      	adds	r3, #4
 8003022:	4619      	mov	r1, r3
 8003024:	4610      	mov	r0, r2
 8003026:	f000 fa43 	bl	80034b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b06      	cmp	r3, #6
 8003064:	d007      	beq.n	8003076 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0201 	bic.w	r2, r2, #1
 8003098:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6a1a      	ldr	r2, [r3, #32]
 80030a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_TIM_Base_Stop_IT+0x48>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	f240 4344 	movw	r3, #1092	; 0x444
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d107      	bne.n	80030ca <HAL_TIM_Base_Stop_IT+0x48>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d122      	bne.n	8003132 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d11b      	bne.n	8003132 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f06f 0202 	mvn.w	r2, #2
 8003102:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f9ad 	bl	8003478 <HAL_TIM_IC_CaptureCallback>
 800311e:	e005      	b.n	800312c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f9a0 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f9af 	bl	800348a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b04      	cmp	r3, #4
 800313e:	d122      	bne.n	8003186 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d11b      	bne.n	8003186 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f06f 0204 	mvn.w	r2, #4
 8003156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f983 	bl	8003478 <HAL_TIM_IC_CaptureCallback>
 8003172:	e005      	b.n	8003180 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f976 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f985 	bl	800348a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b08      	cmp	r3, #8
 8003192:	d122      	bne.n	80031da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d11b      	bne.n	80031da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f06f 0208 	mvn.w	r2, #8
 80031aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2204      	movs	r2, #4
 80031b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f959 	bl	8003478 <HAL_TIM_IC_CaptureCallback>
 80031c6:	e005      	b.n	80031d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f94c 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f95b 	bl	800348a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b10      	cmp	r3, #16
 80031e6:	d122      	bne.n	800322e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d11b      	bne.n	800322e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f06f 0210 	mvn.w	r2, #16
 80031fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2208      	movs	r2, #8
 8003204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f92f 	bl	8003478 <HAL_TIM_IC_CaptureCallback>
 800321a:	e005      	b.n	8003228 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f922 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f931 	bl	800348a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d10e      	bne.n	800325a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f06f 0201 	mvn.w	r2, #1
 8003252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f8fd 	bl	8003454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d10e      	bne.n	8003286 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b80      	cmp	r3, #128	; 0x80
 8003274:	d107      	bne.n	8003286 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800327e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fa5a 	bl	800373a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d10e      	bne.n	80032b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d107      	bne.n	80032b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f8f5 	bl	800349c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d10e      	bne.n	80032de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d107      	bne.n	80032de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f06f 0220 	mvn.w	r2, #32
 80032d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fa25 	bl	8003728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_ConfigClockSource+0x18>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e0a6      	b.n	800344c <HAL_TIM_ConfigClockSource+0x166>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2202      	movs	r2, #2
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800331c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003324:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d067      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x120>
 8003336:	2b40      	cmp	r3, #64	; 0x40
 8003338:	d80b      	bhi.n	8003352 <HAL_TIM_ConfigClockSource+0x6c>
 800333a:	2b10      	cmp	r3, #16
 800333c:	d073      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0x140>
 800333e:	2b10      	cmp	r3, #16
 8003340:	d802      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x62>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d06f      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003346:	e078      	b.n	800343a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003348:	2b20      	cmp	r3, #32
 800334a:	d06c      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0x140>
 800334c:	2b30      	cmp	r3, #48	; 0x30
 800334e:	d06a      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003350:	e073      	b.n	800343a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003352:	2b70      	cmp	r3, #112	; 0x70
 8003354:	d00d      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x8c>
 8003356:	2b70      	cmp	r3, #112	; 0x70
 8003358:	d804      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x7e>
 800335a:	2b50      	cmp	r3, #80	; 0x50
 800335c:	d033      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0xe0>
 800335e:	2b60      	cmp	r3, #96	; 0x60
 8003360:	d041      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003362:	e06a      	b.n	800343a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003368:	d066      	beq.n	8003438 <HAL_TIM_ConfigClockSource+0x152>
 800336a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336e:	d017      	beq.n	80033a0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003370:	e063      	b.n	800343a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6899      	ldr	r1, [r3, #8]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f000 f96e 	bl	8003662 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003394:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	609a      	str	r2, [r3, #8]
      break;
 800339e:	e04c      	b.n	800343a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	6899      	ldr	r1, [r3, #8]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f000 f957 	bl	8003662 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033c2:	609a      	str	r2, [r3, #8]
      break;
 80033c4:	e039      	b.n	800343a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	461a      	mov	r2, r3
 80033d4:	f000 f8ce 	bl	8003574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2150      	movs	r1, #80	; 0x50
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f925 	bl	800362e <TIM_ITRx_SetConfig>
      break;
 80033e4:	e029      	b.n	800343a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6859      	ldr	r1, [r3, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f000 f8ec 	bl	80035d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2160      	movs	r1, #96	; 0x60
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f915 	bl	800362e <TIM_ITRx_SetConfig>
      break;
 8003404:	e019      	b.n	800343a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6859      	ldr	r1, [r3, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	461a      	mov	r2, r3
 8003414:	f000 f8ae 	bl	8003574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2140      	movs	r1, #64	; 0x40
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f905 	bl	800362e <TIM_ITRx_SetConfig>
      break;
 8003424:	e009      	b.n	800343a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f000 f8fc 	bl	800362e <TIM_ITRx_SetConfig>
      break;
 8003436:	e000      	b.n	800343a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003438:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
	...

080034b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a29      	ldr	r2, [pc, #164]	; (8003568 <TIM_Base_SetConfig+0xb8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00b      	beq.n	80034e0 <TIM_Base_SetConfig+0x30>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d007      	beq.n	80034e0 <TIM_Base_SetConfig+0x30>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a26      	ldr	r2, [pc, #152]	; (800356c <TIM_Base_SetConfig+0xbc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <TIM_Base_SetConfig+0x30>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a25      	ldr	r2, [pc, #148]	; (8003570 <TIM_Base_SetConfig+0xc0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d108      	bne.n	80034f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <TIM_Base_SetConfig+0xb8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00b      	beq.n	8003512 <TIM_Base_SetConfig+0x62>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003500:	d007      	beq.n	8003512 <TIM_Base_SetConfig+0x62>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a19      	ldr	r2, [pc, #100]	; (800356c <TIM_Base_SetConfig+0xbc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d003      	beq.n	8003512 <TIM_Base_SetConfig+0x62>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a18      	ldr	r2, [pc, #96]	; (8003570 <TIM_Base_SetConfig+0xc0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d108      	bne.n	8003524 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a07      	ldr	r2, [pc, #28]	; (8003568 <TIM_Base_SetConfig+0xb8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d103      	bne.n	8003558 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	615a      	str	r2, [r3, #20]
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	40012c00 	.word	0x40012c00
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800

08003574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f023 0201 	bic.w	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800359e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 030a 	bic.w	r3, r3, #10
 80035b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	621a      	str	r2, [r3, #32]
}
 80035c6:	bf00      	nop
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr

080035d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	f023 0210 	bic.w	r2, r3, #16
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	031b      	lsls	r3, r3, #12
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800360c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	621a      	str	r2, [r3, #32]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800362e:	b480      	push	{r7}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	f043 0307 	orr.w	r3, r3, #7
 8003650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	609a      	str	r2, [r3, #8]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr

08003662 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003662:	b480      	push	{r7}
 8003664:	b087      	sub	sp, #28
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800367c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	021a      	lsls	r2, r3, #8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	431a      	orrs	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	4313      	orrs	r3, r2
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	609a      	str	r2, [r3, #8]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e032      	b.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr

0800374c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003750:	4904      	ldr	r1, [pc, #16]	; (8003764 <MX_FATFS_Init+0x18>)
 8003752:	4805      	ldr	r0, [pc, #20]	; (8003768 <MX_FATFS_Init+0x1c>)
 8003754:	f003 fc6a 	bl	800702c <FATFS_LinkDriver>
 8003758:	4603      	mov	r3, r0
 800375a:	461a      	mov	r2, r3
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <MX_FATFS_Init+0x20>)
 800375e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8003760:	bf00      	nop
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000b84 	.word	0x20000b84
 8003768:	20000010 	.word	0x20000010
 800376c:	20000b88 	.word	0x20000b88

08003770 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003774:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8003776:	4618      	mov	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fc fe96 	bl	80004bc <SD_disk_initialize>
 8003790:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fc ff72 	bl	8000690 <SD_disk_status>
 80037ac:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	4603      	mov	r3, r0
 80037c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80037c6:	7bf8      	ldrb	r0, [r7, #15]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	f7fc ff73 	bl	80006b8 <SD_disk_read>
 80037d2:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	4603      	mov	r3, r0
 80037ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80037ec:	7bf8      	ldrb	r0, [r7, #15]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	f7fc ffca 	bl	800078c <SD_disk_write>
 80037f8:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	4603      	mov	r3, r0
 800380a:	603a      	str	r2, [r7, #0]
 800380c:	71fb      	strb	r3, [r7, #7]
 800380e:	460b      	mov	r3, r1
 8003810:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003812:	79b9      	ldrb	r1, [r7, #6]
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd f83b 	bl	8000894 <SD_disk_ioctl>
 800381e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	4a08      	ldr	r2, [pc, #32]	; (8003858 <disk_status+0x30>)
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	79fa      	ldrb	r2, [r7, #7]
 8003840:	4905      	ldr	r1, [pc, #20]	; (8003858 <disk_status+0x30>)
 8003842:	440a      	add	r2, r1
 8003844:	7a12      	ldrb	r2, [r2, #8]
 8003846:	4610      	mov	r0, r2
 8003848:	4798      	blx	r3
 800384a:	4603      	mov	r3, r0
 800384c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	20000264 	.word	0x20000264

0800385c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <disk_initialize+0x48>)
 800386e:	5cd3      	ldrb	r3, [r2, r3]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d111      	bne.n	8003898 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	4a0b      	ldr	r2, [pc, #44]	; (80038a4 <disk_initialize+0x48>)
 8003878:	2101      	movs	r1, #1
 800387a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	4a09      	ldr	r2, [pc, #36]	; (80038a4 <disk_initialize+0x48>)
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	79fa      	ldrb	r2, [r7, #7]
 800388a:	4906      	ldr	r1, [pc, #24]	; (80038a4 <disk_initialize+0x48>)
 800388c:	440a      	add	r2, r1
 800388e:	7a12      	ldrb	r2, [r2, #8]
 8003890:	4610      	mov	r0, r2
 8003892:	4798      	blx	r3
 8003894:	4603      	mov	r3, r0
 8003896:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003898:	7bfb      	ldrb	r3, [r7, #15]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000264 	.word	0x20000264

080038a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	4603      	mov	r3, r0
 80038b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <disk_read+0x3c>)
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	689c      	ldr	r4, [r3, #8]
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <disk_read+0x3c>)
 80038c8:	4413      	add	r3, r2
 80038ca:	7a18      	ldrb	r0, [r3, #8]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	47a0      	blx	r4
 80038d4:	4603      	mov	r3, r0
 80038d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd90      	pop	{r4, r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000264 	.word	0x20000264

080038e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	4603      	mov	r3, r0
 80038f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <disk_write+0x3c>)
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	68dc      	ldr	r4, [r3, #12]
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	4a07      	ldr	r2, [pc, #28]	; (8003924 <disk_write+0x3c>)
 8003908:	4413      	add	r3, r2
 800390a:	7a18      	ldrb	r0, [r3, #8]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	47a0      	blx	r4
 8003914:	4603      	mov	r3, r0
 8003916:	75fb      	strb	r3, [r7, #23]
  return res;
 8003918:	7dfb      	ldrb	r3, [r7, #23]
}
 800391a:	4618      	mov	r0, r3
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	bd90      	pop	{r4, r7, pc}
 8003922:	bf00      	nop
 8003924:	20000264 	.word	0x20000264

08003928 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	603a      	str	r2, [r7, #0]
 8003932:	71fb      	strb	r3, [r7, #7]
 8003934:	460b      	mov	r3, r1
 8003936:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	4a09      	ldr	r2, [pc, #36]	; (8003960 <disk_ioctl+0x38>)
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	79fa      	ldrb	r2, [r7, #7]
 8003946:	4906      	ldr	r1, [pc, #24]	; (8003960 <disk_ioctl+0x38>)
 8003948:	440a      	add	r2, r1
 800394a:	7a10      	ldrb	r0, [r2, #8]
 800394c:	79b9      	ldrb	r1, [r7, #6]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	4798      	blx	r3
 8003952:	4603      	mov	r3, r0
 8003954:	73fb      	strb	r3, [r7, #15]
  return res;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000264 	.word	0x20000264

08003964 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003978:	e007      	b.n	800398a <mem_cpy+0x26>
		*d++ = *s++;
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	1c53      	adds	r3, r2, #1
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	1c59      	adds	r1, r3, #1
 8003984:	6179      	str	r1, [r7, #20]
 8003986:	7812      	ldrb	r2, [r2, #0]
 8003988:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	1e5a      	subs	r2, r3, #1
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f2      	bne.n	800397a <mem_cpy+0x16>
}
 8003994:	bf00      	nop
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr

0800399e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800399e:	b480      	push	{r7}
 80039a0:	b087      	sub	sp, #28
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80039ae:	e005      	b.n	80039bc <mem_set+0x1e>
		*d++ = (BYTE)val;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	617a      	str	r2, [r7, #20]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	1e5a      	subs	r2, r3, #1
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f4      	bne.n	80039b0 <mem_set+0x12>
}
 80039c6:	bf00      	nop
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr

080039d0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	; 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80039e8:	bf00      	nop
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	1e5a      	subs	r2, r3, #1
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00d      	beq.n	8003a10 <mem_cmp+0x40>
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	61fa      	str	r2, [r7, #28]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	4619      	mov	r1, r3
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	61ba      	str	r2, [r7, #24]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	1acb      	subs	r3, r1, r3
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ec      	beq.n	80039ea <mem_cmp+0x1a>
	return r;
 8003a10:	697b      	ldr	r3, [r7, #20]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3724      	adds	r7, #36	; 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003a26:	e002      	b.n	8003a2e <chk_chr+0x12>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <chk_chr+0x26>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d1f2      	bne.n	8003a28 <chk_chr+0xc>
	return *str;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	781b      	ldrb	r3, [r3, #0]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	e03d      	b.n	8003ae0 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8003a64:	4932      	ldr	r1, [pc, #200]	; (8003b30 <chk_lock+0xe0>)
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d02e      	beq.n	8003ad6 <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003a78:	492d      	ldr	r1, [pc, #180]	; (8003b30 <chk_lock+0xe0>)
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d122      	bne.n	8003ada <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8003a94:	4926      	ldr	r1, [pc, #152]	; (8003b30 <chk_lock+0xe0>)
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aac:	3308      	adds	r3, #8
 8003aae:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d112      	bne.n	8003ada <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003ab4:	491e      	ldr	r1, [pc, #120]	; (8003b30 <chk_lock+0xe0>)
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	881a      	ldrh	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003acc:	3306      	adds	r3, #6
 8003ace:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d102      	bne.n	8003ada <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003ad4:	e007      	b.n	8003ae6 <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3301      	adds	r3, #1
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d9be      	bls.n	8003a64 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d109      	bne.n	8003b00 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <chk_lock+0xa8>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d101      	bne.n	8003afc <chk_lock+0xac>
 8003af8:	2300      	movs	r3, #0
 8003afa:	e013      	b.n	8003b24 <chk_lock+0xd4>
 8003afc:	2312      	movs	r3, #18
 8003afe:	e011      	b.n	8003b24 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10b      	bne.n	8003b1e <chk_lock+0xce>
 8003b06:	490a      	ldr	r1, [pc, #40]	; (8003b30 <chk_lock+0xe0>)
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	330a      	adds	r3, #10
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1c:	d101      	bne.n	8003b22 <chk_lock+0xd2>
 8003b1e:	2310      	movs	r3, #16
 8003b20:	e000      	b.n	8003b24 <chk_lock+0xd4>
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	2000004c 	.word	0x2000004c

08003b34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	e002      	b.n	8003b46 <enq_lock+0x12>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3301      	adds	r3, #1
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d809      	bhi.n	8003b60 <enq_lock+0x2c>
 8003b4c:	490a      	ldr	r1, [pc, #40]	; (8003b78 <enq_lock+0x44>)
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ef      	bne.n	8003b40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	bf14      	ite	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	2300      	moveq	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	2000004c 	.word	0x2000004c

08003b7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	e030      	b.n	8003bee <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8003b8c:	495a      	ldr	r1, [pc, #360]	; (8003cf8 <inc_lock+0x17c>)
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4613      	mov	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d11f      	bne.n	8003be8 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8003ba8:	4953      	ldr	r1, [pc, #332]	; (8003cf8 <inc_lock+0x17c>)
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d10f      	bne.n	8003be8 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8003bc8:	494b      	ldr	r1, [pc, #300]	; (8003cf8 <inc_lock+0x17c>)
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	881a      	ldrh	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be0:	3306      	adds	r3, #6
 8003be2:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d006      	beq.n	8003bf6 <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3301      	adds	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d9cb      	bls.n	8003b8c <inc_lock+0x10>
 8003bf4:	e000      	b.n	8003bf8 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8003bf6:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d14a      	bne.n	8003c94 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	e002      	b.n	8003c0a <inc_lock+0x8e>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3301      	adds	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d809      	bhi.n	8003c24 <inc_lock+0xa8>
 8003c10:	4939      	ldr	r1, [pc, #228]	; (8003cf8 <inc_lock+0x17c>)
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ef      	bne.n	8003c04 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d101      	bne.n	8003c2e <inc_lock+0xb2>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e05f      	b.n	8003cee <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c34:	6819      	ldr	r1, [r3, #0]
 8003c36:	4830      	ldr	r0, [pc, #192]	; (8003cf8 <inc_lock+0x17c>)
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4403      	add	r3, r0
 8003c44:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	4829      	ldr	r0, [pc, #164]	; (8003cf8 <inc_lock+0x17c>)
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4613      	mov	r3, r2
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4403      	add	r3, r0
 8003c5e:	3304      	adds	r3, #4
 8003c60:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c68:	3306      	adds	r3, #6
 8003c6a:	8818      	ldrh	r0, [r3, #0]
 8003c6c:	4922      	ldr	r1, [pc, #136]	; (8003cf8 <inc_lock+0x17c>)
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003c80:	491d      	ldr	r1, [pc, #116]	; (8003cf8 <inc_lock+0x17c>)
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	330a      	adds	r3, #10
 8003c90:	2200      	movs	r2, #0
 8003c92:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00c      	beq.n	8003cb4 <inc_lock+0x138>
 8003c9a:	4917      	ldr	r1, [pc, #92]	; (8003cf8 <inc_lock+0x17c>)
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	330a      	adds	r3, #10
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <inc_lock+0x138>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e01c      	b.n	8003cee <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <inc_lock+0x156>
 8003cba:	490f      	ldr	r1, [pc, #60]	; (8003cf8 <inc_lock+0x17c>)
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	330a      	adds	r3, #10
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	b299      	uxth	r1, r3
 8003cd0:	e001      	b.n	8003cd6 <inc_lock+0x15a>
 8003cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cd6:	4808      	ldr	r0, [pc, #32]	; (8003cf8 <inc_lock+0x17c>)
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4403      	add	r3, r0
 8003ce4:	330a      	adds	r3, #10
 8003ce6:	460a      	mov	r2, r1
 8003ce8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3301      	adds	r3, #1
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	2000004c 	.word	0x2000004c

08003cfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d82e      	bhi.n	8003d6e <dec_lock+0x72>
		n = Files[i].ctr;
 8003d10:	491b      	ldr	r1, [pc, #108]	; (8003d80 <dec_lock+0x84>)
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	330a      	adds	r3, #10
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003d24:	89fb      	ldrh	r3, [r7, #14]
 8003d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2a:	d101      	bne.n	8003d30 <dec_lock+0x34>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003d30:	89fb      	ldrh	r3, [r7, #14]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <dec_lock+0x40>
 8003d36:	89fb      	ldrh	r3, [r7, #14]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003d3c:	4910      	ldr	r1, [pc, #64]	; (8003d80 <dec_lock+0x84>)
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	330a      	adds	r3, #10
 8003d4c:	89fa      	ldrh	r2, [r7, #14]
 8003d4e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003d50:	89fb      	ldrh	r3, [r7, #14]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d108      	bne.n	8003d68 <dec_lock+0x6c>
 8003d56:	490a      	ldr	r1, [pc, #40]	; (8003d80 <dec_lock+0x84>)
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	737b      	strb	r3, [r7, #13]
 8003d6c:	e001      	b.n	8003d72 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003d6e:	2302      	movs	r3, #2
 8003d70:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003d72:	7b7b      	ldrb	r3, [r7, #13]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	2000004c 	.word	0x2000004c

08003d84 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e016      	b.n	8003dc0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003d92:	490f      	ldr	r1, [pc, #60]	; (8003dd0 <clear_lock+0x4c>)
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d108      	bne.n	8003dba <clear_lock+0x36>
 8003da8:	4909      	ldr	r1, [pc, #36]	; (8003dd0 <clear_lock+0x4c>)
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4613      	mov	r3, r2
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d9e5      	bls.n	8003d92 <clear_lock+0xe>
	}
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	2000004c 	.word	0x2000004c

08003dd4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de6:	3304      	adds	r3, #4
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d047      	beq.n	8003e7e <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003df4:	330c      	adds	r3, #12
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e00:	3301      	adds	r3, #1
 8003e02:	7818      	ldrb	r0, [r3, #0]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	2301      	movs	r3, #1
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	f7ff fd6d 	bl	80038e8 <disk_write>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <sync_window+0x46>
			res = FR_DISK_ERR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
 8003e18:	e031      	b.n	8003e7e <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e20:	3304      	adds	r3, #4
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	1ad2      	subs	r2, r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e38:	3318      	adds	r3, #24
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d21e      	bcs.n	8003e7e <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e46:	3303      	adds	r3, #3
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	e014      	b.n	8003e78 <sync_window+0xa4>
					wsect += fs->fsize;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e54:	3318      	adds	r3, #24
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e64:	3301      	adds	r3, #1
 8003e66:	7818      	ldrb	r0, [r3, #0]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	f7ff fd3b 	bl	80038e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d8e7      	bhi.n	8003e4e <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d01f      	beq.n	8003ee6 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ff94 	bl	8003dd4 <sync_window>
 8003eac:	4603      	mov	r3, r0
 8003eae:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d117      	bne.n	8003ee6 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	7818      	ldrb	r0, [r3, #0]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	f7ff fcef 	bl	80038a8 <disk_read>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ed4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ff6b 	bl	8003dd4 <sync_window>
 8003efe:	4603      	mov	r3, r0
 8003f00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f040 80bd 	bne.w	8004084 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	f040 80a7 	bne.w	8004066 <sync_fs+0x176>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1e:	3305      	adds	r3, #5
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	f040 809f 	bne.w	8004066 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f30:	330a      	adds	r3, #10
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	2100      	movs	r1, #0
 8003f38:	f7ff fd31 	bl	800399e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2255      	movs	r2, #85	; 0x55
 8003f40:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	22aa      	movs	r2, #170	; 0xaa
 8003f48:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2252      	movs	r2, #82	; 0x52
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2252      	movs	r2, #82	; 0x52
 8003f56:	705a      	strb	r2, [r3, #1]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2261      	movs	r2, #97	; 0x61
 8003f5c:	709a      	strb	r2, [r3, #2]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2241      	movs	r2, #65	; 0x41
 8003f62:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2272      	movs	r2, #114	; 0x72
 8003f68:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2272      	movs	r2, #114	; 0x72
 8003f70:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2241      	movs	r2, #65	; 0x41
 8003f78:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2261      	movs	r2, #97	; 0x61
 8003f80:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8a:	3310      	adds	r3, #16
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f9c:	3310      	adds	r3, #16
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb4:	3310      	adds	r3, #16
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc8:	3310      	adds	r3, #16
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	0e1b      	lsrs	r3, r3, #24
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fdc:	330c      	adds	r3, #12
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fee:	330c      	adds	r3, #12
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004006:	330c      	adds	r3, #12
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	0c1b      	lsrs	r3, r3, #16
 800400c:	b2da      	uxtb	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401a:	330c      	adds	r3, #12
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	0e1b      	lsrs	r3, r3, #24
 8004020:	b2da      	uxtb	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402e:	331c      	adds	r3, #28
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800403a:	330c      	adds	r3, #12
 800403c:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004044:	3301      	adds	r3, #1
 8004046:	7818      	ldrb	r0, [r3, #0]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004050:	330c      	adds	r3, #12
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	2301      	movs	r3, #1
 8004056:	f7ff fc47 	bl	80038e8 <disk_write>
			fs->fsi_flag = 0;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004060:	3305      	adds	r3, #5
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406c:	3301      	adds	r3, #1
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2200      	movs	r2, #0
 8004072:	2100      	movs	r1, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fc57 	bl	8003928 <disk_ioctl>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <sync_fs+0x194>
			res = FR_DISK_ERR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	3b02      	subs	r3, #2
 800409c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a4:	3314      	adds	r3, #20
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3b02      	subs	r3, #2
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d301      	bcc.n	80040b4 <clust2sect+0x26>
 80040b0:	2300      	movs	r3, #0
 80040b2:	e00e      	b.n	80040d2 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ba:	3302      	adds	r3, #2
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	fb03 f202 	mul.w	r2, r3, r2
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80040cc:	3308      	adds	r3, #8
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4413      	add	r3, r2
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d907      	bls.n	80040fc <get_fat+0x20>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f2:	3314      	adds	r3, #20
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d302      	bcc.n	8004102 <get_fat+0x26>
		val = 1;	/* Internal error */
 80040fc:	2301      	movs	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e0e9      	b.n	80042d6 <get_fat+0x1fa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004106:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d068      	beq.n	80041e6 <get_fat+0x10a>
 8004114:	2b03      	cmp	r3, #3
 8004116:	f000 8099 	beq.w	800424c <get_fat+0x170>
 800411a:	2b01      	cmp	r3, #1
 800411c:	f040 80d1 	bne.w	80042c2 <get_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413c:	330a      	adds	r3, #10
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	4619      	mov	r1, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	fbb3 f3f1 	udiv	r3, r3, r1
 8004148:	4413      	add	r3, r2
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fe9b 	bl	8003e88 <move_window>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	f040 80b7 	bne.w	80042c8 <get_fat+0x1ec>
			wc = fs->win.d8[bc++ % SS(fs)];
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	60fa      	str	r2, [r7, #12]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004166:	320a      	adds	r2, #10
 8004168:	8812      	ldrh	r2, [r2, #0]
 800416a:	fbb3 f1f2 	udiv	r1, r3, r2
 800416e:	fb02 f201 	mul.w	r2, r2, r1
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	5cd3      	ldrb	r3, [r2, r3]
 8004178:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004188:	330a      	adds	r3, #10
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	4619      	mov	r1, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	fbb3 f3f1 	udiv	r3, r3, r1
 8004194:	4413      	add	r3, r2
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff fe75 	bl	8003e88 <move_window>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f040 8093 	bne.w	80042cc <get_fat+0x1f0>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ac:	330a      	adds	r3, #10
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80041b8:	fb02 f201 	mul.w	r2, r2, r1
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	5cd3      	ldrb	r3, [r2, r3]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <get_fat+0x100>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	091b      	lsrs	r3, r3, #4
 80041da:	e002      	b.n	80041e2 <get_fat+0x106>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e2:	617b      	str	r3, [r7, #20]
			break;
 80041e4:	e077      	b.n	80042d6 <get_fat+0x1fa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f4:	330a      	adds	r3, #10
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	4619      	mov	r1, r3
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	fbb3 f3f1 	udiv	r3, r3, r1
 8004204:	4413      	add	r3, r2
 8004206:	4619      	mov	r1, r3
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff fe3d 	bl	8003e88 <move_window>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d15d      	bne.n	80042d0 <get_fat+0x1f4>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	005a      	lsls	r2, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421e:	330a      	adds	r3, #10
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	fbb2 f1f3 	udiv	r1, r2, r3
 8004226:	fb03 f301 	mul.w	r3, r3, r1
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	4413      	add	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3301      	adds	r3, #1
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	b21a      	sxth	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	b21b      	sxth	r3, r3
 8004242:	4313      	orrs	r3, r2
 8004244:	b21b      	sxth	r3, r3
 8004246:	b29b      	uxth	r3, r3
 8004248:	617b      	str	r3, [r7, #20]
			break;
 800424a:	e044      	b.n	80042d6 <get_fat+0x1fa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425a:	330a      	adds	r3, #10
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	b29b      	uxth	r3, r3
 8004262:	4619      	mov	r1, r3
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	fbb3 f3f1 	udiv	r3, r3, r1
 800426a:	4413      	add	r3, r2
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fe0a 	bl	8003e88 <move_window>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d12c      	bne.n	80042d4 <get_fat+0x1f8>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	009a      	lsls	r2, r3, #2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004284:	330a      	adds	r3, #10
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	fbb2 f1f3 	udiv	r1, r2, r3
 800428c:	fb03 f301 	mul.w	r3, r3, r1
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	3303      	adds	r3, #3
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	061a      	lsls	r2, r3, #24
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	3302      	adds	r3, #2
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	4313      	orrs	r3, r2
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	3201      	adds	r2, #1
 80042ae:	7812      	ldrb	r2, [r2, #0]
 80042b0:	0212      	lsls	r2, r2, #8
 80042b2:	4313      	orrs	r3, r2
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	7812      	ldrb	r2, [r2, #0]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042be:	617b      	str	r3, [r7, #20]
			break;
 80042c0:	e009      	b.n	80042d6 <get_fat+0x1fa>

		default:
			val = 1;	/* Internal error */
 80042c2:	2301      	movs	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e006      	b.n	80042d6 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042c8:	bf00      	nop
 80042ca:	e004      	b.n	80042d6 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042cc:	bf00      	nop
 80042ce:	e002      	b.n	80042d6 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80042d0:	bf00      	nop
 80042d2:	e000      	b.n	80042d6 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80042d4:	bf00      	nop
		}
	}

	return val;
 80042d6:	697b      	ldr	r3, [r7, #20]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d907      	bls.n	8004302 <put_fat+0x22>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f8:	3314      	adds	r3, #20
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d302      	bcc.n	8004308 <put_fat+0x28>
		res = FR_INT_ERR;
 8004302:	2302      	movs	r3, #2
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e143      	b.n	8004590 <put_fat+0x2b0>

	} else {
		switch (fs->fs_type) {
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b02      	cmp	r3, #2
 8004312:	f000 809a 	beq.w	800444a <put_fat+0x16a>
 8004316:	2b03      	cmp	r3, #3
 8004318:	f000 80d3 	beq.w	80044c2 <put_fat+0x1e2>
 800431c:	2b01      	cmp	r3, #1
 800431e:	f040 812d 	bne.w	800457c <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4413      	add	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800433e:	330a      	adds	r3, #10
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	4619      	mov	r1, r3
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	fbb3 f3f1 	udiv	r3, r3, r1
 800434a:	4413      	add	r3, r2
 800434c:	4619      	mov	r1, r3
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f7ff fd9a 	bl	8003e88 <move_window>
 8004354:	4603      	mov	r3, r0
 8004356:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004358:	7ffb      	ldrb	r3, [r7, #31]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 8111 	bne.w	8004582 <put_fat+0x2a2>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	617a      	str	r2, [r7, #20]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800436c:	320a      	adds	r2, #10
 800436e:	8812      	ldrh	r2, [r2, #0]
 8004370:	fbb3 f1f2 	udiv	r1, r3, r2
 8004374:	fb02 f201 	mul.w	r2, r2, r1
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <put_fat+0xc6>
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	b25b      	sxtb	r3, r3
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	b25a      	sxtb	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	b25b      	sxtb	r3, r3
 800439e:	4313      	orrs	r3, r2
 80043a0:	b25b      	sxtb	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	e001      	b.n	80043aa <put_fat+0xca>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b4:	3304      	adds	r3, #4
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c8:	330a      	adds	r3, #10
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	4619      	mov	r1, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80043d4:	4413      	add	r3, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7ff fd55 	bl	8003e88 <move_window>
 80043de:	4603      	mov	r3, r0
 80043e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80043e2:	7ffb      	ldrb	r3, [r7, #31]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f040 80ce 	bne.w	8004586 <put_fat+0x2a6>
			p = &fs->win.d8[bc % SS(fs)];
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f0:	330a      	adds	r3, #10
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80043fc:	fb02 f201 	mul.w	r2, r2, r1
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <put_fat+0x13a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	b2db      	uxtb	r3, r3
 8004418:	e00e      	b.n	8004438 <put_fat+0x158>
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	b25b      	sxtb	r3, r3
 8004420:	f023 030f 	bic.w	r3, r3, #15
 8004424:	b25a      	sxtb	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	b25b      	sxtb	r3, r3
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	b25b      	sxtb	r3, r3
 8004432:	4313      	orrs	r3, r2
 8004434:	b25b      	sxtb	r3, r3
 8004436:	b2db      	uxtb	r3, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004442:	3304      	adds	r3, #4
 8004444:	2201      	movs	r2, #1
 8004446:	701a      	strb	r2, [r3, #0]
			break;
 8004448:	e0a2      	b.n	8004590 <put_fat+0x2b0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004458:	330a      	adds	r3, #10
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	b29b      	uxth	r3, r3
 8004460:	4619      	mov	r1, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	fbb3 f3f1 	udiv	r3, r3, r1
 8004468:	4413      	add	r3, r2
 800446a:	4619      	mov	r1, r3
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff fd0b 	bl	8003e88 <move_window>
 8004472:	4603      	mov	r3, r0
 8004474:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004476:	7ffb      	ldrb	r3, [r7, #31]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f040 8086 	bne.w	800458a <put_fat+0x2aa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	005a      	lsls	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004488:	330a      	adds	r3, #10
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004490:	fb03 f301 	mul.w	r3, r3, r1
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4413      	add	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	701a      	strb	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	0a1b      	lsrs	r3, r3, #8
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	3301      	adds	r3, #1
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ba:	3304      	adds	r3, #4
 80044bc:	2201      	movs	r2, #1
 80044be:	701a      	strb	r2, [r3, #0]
			break;
 80044c0:	e066      	b.n	8004590 <put_fat+0x2b0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d0:	330a      	adds	r3, #10
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	089b      	lsrs	r3, r3, #2
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	4619      	mov	r1, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80044e0:	4413      	add	r3, r2
 80044e2:	4619      	mov	r1, r3
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fccf 	bl	8003e88 <move_window>
 80044ea:	4603      	mov	r3, r0
 80044ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80044ee:	7ffb      	ldrb	r3, [r7, #31]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d14c      	bne.n	800458e <put_fat+0x2ae>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	009a      	lsls	r2, r3, #2
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fe:	330a      	adds	r3, #10
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	fbb2 f1f3 	udiv	r1, r2, r3
 8004506:	fb03 f301 	mul.w	r3, r3, r1
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	3303      	adds	r3, #3
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	061a      	lsls	r2, r3, #24
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	3302      	adds	r3, #2
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	4313      	orrs	r3, r2
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	3201      	adds	r2, #1
 8004528:	7812      	ldrb	r2, [r2, #0]
 800452a:	0212      	lsls	r2, r2, #8
 800452c:	4313      	orrs	r3, r2
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	7812      	ldrb	r2, [r2, #0]
 8004532:	4313      	orrs	r3, r2
 8004534:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4313      	orrs	r3, r2
 800453c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	b29b      	uxth	r3, r3
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	b29a      	uxth	r2, r3
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	3301      	adds	r3, #1
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	0c1a      	lsrs	r2, r3, #16
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	3302      	adds	r3, #2
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	0e1a      	lsrs	r2, r3, #24
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	3303      	adds	r3, #3
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004574:	3304      	adds	r3, #4
 8004576:	2201      	movs	r2, #1
 8004578:	701a      	strb	r2, [r3, #0]
			break;
 800457a:	e009      	b.n	8004590 <put_fat+0x2b0>

		default :
			res = FR_INT_ERR;
 800457c:	2302      	movs	r3, #2
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e006      	b.n	8004590 <put_fat+0x2b0>
			if (res != FR_OK) break;
 8004582:	bf00      	nop
 8004584:	e004      	b.n	8004590 <put_fat+0x2b0>
			if (res != FR_OK) break;
 8004586:	bf00      	nop
 8004588:	e002      	b.n	8004590 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800458a:	bf00      	nop
 800458c:	e000      	b.n	8004590 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800458e:	bf00      	nop
		}
	}

	return res;
 8004590:	7ffb      	ldrb	r3, [r7, #31]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d907      	bls.n	80045ba <remove_chain+0x20>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b0:	3314      	adds	r3, #20
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <remove_chain+0x26>
		res = FR_INT_ERR;
 80045ba:	2302      	movs	r3, #2
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	e04f      	b.n	8004660 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80045c4:	e040      	b.n	8004648 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80045c6:	6839      	ldr	r1, [r7, #0]
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff fd87 	bl	80040dc <get_fat>
 80045ce:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d041      	beq.n	800465a <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d102      	bne.n	80045e2 <remove_chain+0x48>
 80045dc:	2302      	movs	r3, #2
 80045de:	73fb      	strb	r3, [r7, #15]
 80045e0:	e03e      	b.n	8004660 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e8:	d102      	bne.n	80045f0 <remove_chain+0x56>
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
 80045ee:	e037      	b.n	8004660 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80045f0:	2200      	movs	r2, #0
 80045f2:	6839      	ldr	r1, [r7, #0]
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff fe73 	bl	80042e0 <put_fat>
 80045fa:	4603      	mov	r3, r0
 80045fc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d12c      	bne.n	800465e <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460a:	3310      	adds	r3, #16
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004612:	d017      	beq.n	8004644 <remove_chain+0xaa>
				fs->free_clust++;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800461a:	3310      	adds	r3, #16
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004626:	3310      	adds	r3, #16
 8004628:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004630:	3305      	adds	r3, #5
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	b2da      	uxtb	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004640:	3305      	adds	r3, #5
 8004642:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800464e:	3314      	adds	r3, #20
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d3b6      	bcc.n	80045c6 <remove_chain+0x2c>
 8004658:	e002      	b.n	8004660 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <remove_chain+0xc6>
			if (res != FR_OK) break;
 800465e:	bf00      	nop
		}
	}

	return res;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b086      	sub	sp, #24
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d113      	bne.n	80046a2 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004680:	330c      	adds	r3, #12
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <create_chain+0x32>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004692:	3314      	adds	r3, #20
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	429a      	cmp	r2, r3
 800469a:	d31e      	bcc.n	80046da <create_chain+0x70>
 800469c:	2301      	movs	r3, #1
 800469e:	613b      	str	r3, [r7, #16]
 80046a0:	e01b      	b.n	80046da <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80046a2:	6839      	ldr	r1, [r7, #0]
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fd19 	bl	80040dc <get_fat>
 80046aa:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d801      	bhi.n	80046b6 <create_chain+0x4c>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e086      	b.n	80047c4 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046bc:	d101      	bne.n	80046c2 <create_chain+0x58>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	e080      	b.n	80047c4 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c8:	3314      	adds	r3, #20
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d201      	bcs.n	80046d6 <create_chain+0x6c>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	e076      	b.n	80047c4 <create_chain+0x15a>
		scl = clst;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	3301      	adds	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ea:	3314      	adds	r3, #20
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d307      	bcc.n	8004704 <create_chain+0x9a>
			ncl = 2;
 80046f4:	2302      	movs	r3, #2
 80046f6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d901      	bls.n	8004704 <create_chain+0x9a>
 8004700:	2300      	movs	r3, #0
 8004702:	e05f      	b.n	80047c4 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004704:	6979      	ldr	r1, [r7, #20]
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff fce8 	bl	80040dc <get_fat>
 800470c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00e      	beq.n	8004732 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800471a:	d002      	beq.n	8004722 <create_chain+0xb8>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <create_chain+0xbc>
			return cs;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	e04e      	b.n	80047c4 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	429a      	cmp	r2, r3
 800472c:	d1d7      	bne.n	80046de <create_chain+0x74>
 800472e:	2300      	movs	r3, #0
 8004730:	e048      	b.n	80047c4 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8004732:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004734:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004738:	6979      	ldr	r1, [r7, #20]
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fdd0 	bl	80042e0 <put_fat>
 8004740:	4603      	mov	r3, r0
 8004742:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <create_chain+0xf4>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d006      	beq.n	800475e <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff fdc3 	bl	80042e0 <put_fat>
 800475a:	4603      	mov	r3, r0
 800475c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d126      	bne.n	80047b2 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476a:	330c      	adds	r3, #12
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004776:	3310      	adds	r3, #16
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800477e:	d020      	beq.n	80047c2 <create_chain+0x158>
			fs->free_clust--;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004786:	3310      	adds	r3, #16
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	1e5a      	subs	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004792:	3310      	adds	r3, #16
 8004794:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479c:	3305      	adds	r3, #5
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ac:	3305      	adds	r3, #5
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	e007      	b.n	80047c2 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d102      	bne.n	80047be <create_chain+0x154>
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047bc:	e000      	b.n	80047c0 <create_chain+0x156>
 80047be:	2301      	movs	r3, #1
 80047c0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80047c2:	697b      	ldr	r3, [r7, #20]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80047dc:	3304      	adds	r3, #4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3304      	adds	r3, #4
 80047e2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f0:	330a      	adds	r3, #10
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004808:	3302      	adds	r3, #2
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1d1a      	adds	r2, r3, #4
 8004816:	613a      	str	r2, [r7, #16]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <clmt_clust+0x5a>
 8004822:	2300      	movs	r3, #0
 8004824:	e010      	b.n	8004848 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	429a      	cmp	r2, r3
 800482c:	d307      	bcc.n	800483e <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	3304      	adds	r3, #4
 800483a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800483c:	e7e9      	b.n	8004812 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 800483e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4413      	add	r3, r2
}
 8004848:	4618      	mov	r0, r3
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr

08004852 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004866:	3306      	adds	r3, #6
 8004868:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004870:	3308      	adds	r3, #8
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d00a      	beq.n	8004892 <dir_sdi+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004888:	3314      	adds	r3, #20
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	429a      	cmp	r2, r3
 8004890:	d301      	bcc.n	8004896 <dir_sdi+0x44>
		return FR_INT_ERR;
 8004892:	2302      	movs	r3, #2
 8004894:	e0b4      	b.n	8004a00 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d111      	bne.n	80048c0 <dir_sdi+0x6e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d108      	bne.n	80048c0 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80048ba:	3304      	adds	r3, #4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d117      	bne.n	80048f6 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d2:	3308      	adds	r3, #8
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	4293      	cmp	r3, r2
 80048dc:	d301      	bcc.n	80048e2 <dir_sdi+0x90>
			return FR_INT_ERR;
 80048de:	2302      	movs	r3, #2
 80048e0:	e08e      	b.n	8004a00 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80048ee:	3304      	adds	r3, #4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	e046      	b.n	8004984 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004902:	330a      	adds	r3, #10
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	b29b      	uxth	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004918:	3302      	adds	r3, #2
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	fb03 f302 	mul.w	r3, r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004922:	e022      	b.n	800496a <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff fbd4 	bl	80040dc <get_fat>
 8004934:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800493c:	d101      	bne.n	8004942 <dir_sdi+0xf0>
 800493e:	2301      	movs	r3, #1
 8004940:	e05e      	b.n	8004a00 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d90a      	bls.n	800495e <dir_sdi+0x10c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004954:	3314      	adds	r3, #20
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	429a      	cmp	r2, r3
 800495c:	d301      	bcc.n	8004962 <dir_sdi+0x110>
				return FR_INT_ERR;
 800495e:	2302      	movs	r3, #2
 8004960:	e04e      	b.n	8004a00 <dir_sdi+0x1ae>
			idx -= ic;
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	429a      	cmp	r2, r3
 8004970:	d2d8      	bcs.n	8004924 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6979      	ldr	r1, [r7, #20]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fb86 	bl	800408e <clust2sect>
 8004982:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	330c      	adds	r3, #12
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <dir_sdi+0x148>
 8004996:	2302      	movs	r3, #2
 8004998:	e032      	b.n	8004a00 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a6:	330a      	adds	r3, #10
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	441a      	add	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c0:	3310      	adds	r3, #16
 80049c2:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049da:	330a      	adds	r3, #10
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80049ea:	fb02 f201 	mul.w	r2, r2, r1
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	015b      	lsls	r3, r3, #5
 80049f2:	18c2      	adds	r2, r0, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fa:	3314      	adds	r3, #20
 80049fc:	601a      	str	r2, [r3, #0]

	return FR_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a18:	3306      	adds	r3, #6
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d006      	beq.n	8004a36 <dir_next+0x2e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a2e:	3310      	adds	r3, #16
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <dir_next+0x32>
		return FR_NO_FILE;
 8004a36:	2304      	movs	r3, #4
 8004a38:	e144      	b.n	8004cc4 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a46:	330a      	adds	r3, #10
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a56:	fb02 f201 	mul.w	r2, r2, r1
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 810c 	bne.w	8004c7a <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a68:	3310      	adds	r3, #16
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a74:	3310      	adds	r3, #16
 8004a76:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7e:	330c      	adds	r3, #12
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10e      	bne.n	8004aa4 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a92:	3308      	adds	r3, #8
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	f0c0 80ed 	bcc.w	8004c7a <dir_next+0x272>
				return FR_NO_FILE;
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	e10f      	b.n	8004cc4 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab0:	330a      	adds	r3, #10
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004acc:	3302      	adds	r3, #2
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f040 80d0 	bne.w	8004c7a <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae8:	330c      	adds	r3, #12
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f7ff faf4 	bl	80040dc <get_fat>
 8004af4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d801      	bhi.n	8004b00 <dir_next+0xf8>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e0e1      	b.n	8004cc4 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b06:	d101      	bne.n	8004b0c <dir_next+0x104>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0db      	b.n	8004cc4 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b18:	3314      	adds	r3, #20
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	f0c0 8097 	bcc.w	8004c52 <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <dir_next+0x126>
 8004b2a:	2304      	movs	r3, #4
 8004b2c:	e0ca      	b.n	8004cc4 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4619      	mov	r1, r3
 8004b42:	4610      	mov	r0, r2
 8004b44:	f7ff fd91 	bl	800466a <create_chain>
 8004b48:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <dir_next+0x14c>
 8004b50:	2307      	movs	r3, #7
 8004b52:	e0b7      	b.n	8004cc4 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <dir_next+0x156>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e0b2      	b.n	8004cc4 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b64:	d101      	bne.n	8004b6a <dir_next+0x162>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e0ac      	b.n	8004cc4 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff f92e 	bl	8003dd4 <sync_window>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <dir_next+0x17a>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e0a0      	b.n	8004cc4 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b98:	330a      	adds	r3, #10
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	f7fe fefd 	bl	800399e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb2:	681c      	ldr	r4, [r3, #0]
 8004bb4:	6979      	ldr	r1, [r7, #20]
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f7ff fa69 	bl	800408e <clust2sect>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8004bc2:	330c      	adds	r3, #12
 8004bc4:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	e024      	b.n	8004c16 <dir_next+0x20e>
						dp->fs->wflag = 1;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd8:	3304      	adds	r3, #4
 8004bda:	2201      	movs	r2, #1
 8004bdc:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff f8f4 	bl	8003dd4 <sync_window>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <dir_next+0x1ee>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e066      	b.n	8004cc4 <dir_next+0x2bc>
						dp->fs->winsect++;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004c02:	330c      	adds	r3, #12
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	1c59      	adds	r1, r3, #1
 8004c08:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	3301      	adds	r3, #1
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c22:	3302      	adds	r3, #2
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d3ce      	bcc.n	8004bcc <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	1a8a      	subs	r2, r1, r2
 8004c4a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004c4e:	330c      	adds	r3, #12
 8004c50:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c58:	330c      	adds	r3, #12
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6979      	ldr	r1, [r7, #20]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fa10 	bl	800408e <clust2sect>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c76:	3310      	adds	r3, #16
 8004c78:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c84:	3306      	adds	r3, #6
 8004c86:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9e:	330a      	adds	r3, #10
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cae:	fb02 f201 	mul.w	r2, r2, r1
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	015b      	lsls	r3, r3, #5
 8004cb6:	18c2      	adds	r2, r0, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cbe:	3314      	adds	r3, #20
 8004cc0:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd90      	pop	{r4, r7, pc}

08004ccc <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff fdba 	bl	8004852 <dir_sdi>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d138      	bne.n	8004d5a <dir_alloc+0x8e>
		n = 0;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfa:	3310      	adds	r3, #16
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7ff f8c1 	bl	8003e88 <move_window>
 8004d06:	4603      	mov	r3, r0
 8004d08:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d123      	bne.n	8004d58 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d16:	3314      	adds	r3, #20
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2be5      	cmp	r3, #229	; 0xe5
 8004d1e:	d007      	beq.n	8004d30 <dir_alloc+0x64>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d26:	3314      	adds	r3, #20
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d107      	bne.n	8004d40 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	3301      	adds	r3, #1
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d102      	bne.n	8004d44 <dir_alloc+0x78>
 8004d3e:	e00c      	b.n	8004d5a <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004d40:	2300      	movs	r3, #0
 8004d42:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004d44:	2101      	movs	r1, #1
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff fe5e 	bl	8004a08 <dir_next>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0ca      	beq.n	8004cec <dir_alloc+0x20>
 8004d56:	e000      	b.n	8004d5a <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8004d58:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d101      	bne.n	8004d64 <dir_alloc+0x98>
 8004d60:	2307      	movs	r3, #7
 8004d62:	73fb      	strb	r3, [r7, #15]
	return res;
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	331b      	adds	r3, #27
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	b21a      	sxth	r2, r3
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	331a      	adds	r3, #26
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	b21b      	sxth	r3, r3
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	b21b      	sxth	r3, r3
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d10f      	bne.n	8004dbe <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	3315      	adds	r3, #21
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	b21a      	sxth	r2, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	3314      	adds	r3, #20
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	b21b      	sxth	r3, r3
 8004db0:	4313      	orrs	r3, r2
 8004db2:	b21b      	sxth	r3, r3
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

	return cl;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	331a      	adds	r3, #26
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	331b      	adds	r3, #27
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	0c1a      	lsrs	r2, r3, #16
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3314      	adds	r3, #20
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	0c1b      	lsrs	r3, r3, #16
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	0a1b      	lsrs	r3, r3, #8
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3315      	adds	r3, #21
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
	...

08004e18 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2a:	1e5a      	subs	r2, r3, #1
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004e40:	4a2b      	ldr	r2, [pc, #172]	; (8004ef0 <cmp_lfn+0xd8>)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4413      	add	r3, r2
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	b21a      	sxth	r2, r3
 8004e54:	4926      	ldr	r1, [pc, #152]	; (8004ef0 <cmp_lfn+0xd8>)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	440b      	add	r3, r1
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	440b      	add	r3, r1
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	b21b      	sxth	r3, r3
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b21b      	sxth	r3, r3
 8004e6a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8004e6c:	89fb      	ldrh	r3, [r7, #14]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d019      	beq.n	8004ea6 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004e72:	89bb      	ldrh	r3, [r7, #12]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f002 f923 	bl	80070c0 <ff_wtoupper>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2bfe      	cmp	r3, #254	; 0xfe
 8004e82:	d80e      	bhi.n	8004ea2 <cmp_lfn+0x8a>
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	617a      	str	r2, [r7, #20]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f002 f914 	bl	80070c0 <ff_wtoupper>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	89fb      	ldrh	r3, [r7, #14]
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d008      	beq.n	8004eb4 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e01f      	b.n	8004ee6 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004ea6:	89bb      	ldrh	r3, [r7, #12]
 8004ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d001      	beq.n	8004eb4 <cmp_lfn+0x9c>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e018      	b.n	8004ee6 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b0c      	cmp	r3, #12
 8004ebe:	d9bf      	bls.n	8004e40 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <cmp_lfn+0xcc>
 8004ecc:	89fb      	ldrh	r3, [r7, #14]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d008      	beq.n	8004ee4 <cmp_lfn+0xcc>
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	4413      	add	r3, r2
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <cmp_lfn+0xcc>
		return 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e000      	b.n	8004ee6 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8004ee4:	2301      	movs	r3, #1
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	080072a8 	.word	0x080072a8

08004ef4 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b089      	sub	sp, #36	; 0x24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4611      	mov	r1, r2
 8004f00:	461a      	mov	r2, r3
 8004f02:	460b      	mov	r3, r1
 8004f04:	71fb      	strb	r3, [r7, #7]
 8004f06:	4613      	mov	r3, r2
 8004f08:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	330d      	adds	r3, #13
 8004f0e:	79ba      	ldrb	r2, [r7, #6]
 8004f10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	330b      	adds	r3, #11
 8004f16:	220f      	movs	r2, #15
 8004f18:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	331a      	adds	r3, #26
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	331b      	adds	r3, #27
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004f32:	79fb      	ldrb	r3, [r7, #7]
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	4613      	mov	r3, r2
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	82fb      	strh	r3, [r7, #22]
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8004f4a:	8afb      	ldrh	r3, [r7, #22]
 8004f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d007      	beq.n	8004f64 <fit_lfn+0x70>
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	61fa      	str	r2, [r7, #28]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004f64:	4a1c      	ldr	r2, [pc, #112]	; (8004fd8 <fit_lfn+0xe4>)
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	4413      	add	r3, r2
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4413      	add	r3, r2
 8004f72:	8afa      	ldrh	r2, [r7, #22]
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	8afb      	ldrh	r3, [r7, #22]
 8004f7a:	0a1b      	lsrs	r3, r3, #8
 8004f7c:	b299      	uxth	r1, r3
 8004f7e:	4a16      	ldr	r2, [pc, #88]	; (8004fd8 <fit_lfn+0xe4>)
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	4413      	add	r3, r2
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	3301      	adds	r3, #1
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	b2ca      	uxtb	r2, r1
 8004f8e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004f90:	8afb      	ldrh	r3, [r7, #22]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d102      	bne.n	8004f9c <fit_lfn+0xa8>
 8004f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f9a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d9d0      	bls.n	8004f4a <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004fa8:	8afb      	ldrh	r3, [r7, #22]
 8004faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d006      	beq.n	8004fc0 <fit_lfn+0xcc>
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4413      	add	r3, r2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d103      	bne.n	8004fc8 <fit_lfn+0xd4>
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fc6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	79fa      	ldrb	r2, [r7, #7]
 8004fcc:	701a      	strb	r2, [r3, #0]
}
 8004fce:	bf00      	nop
 8004fd0:	3724      	adds	r7, #36	; 0x24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr
 8004fd8:	080072a8 	.word	0x080072a8

08004fdc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08c      	sub	sp, #48	; 0x30
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004fea:	220b      	movs	r2, #11
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7fe fcb8 	bl	8003964 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b05      	cmp	r3, #5
 8004ff8:	d92b      	bls.n	8005052 <gen_numname+0x76>
		sr = seq;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004ffe:	e022      	b.n	8005046 <gen_numname+0x6a>
			wc = *lfn++;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	1c9a      	adds	r2, r3, #2
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800500a:	2300      	movs	r3, #0
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
 800500e:	e017      	b.n	8005040 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	005a      	lsls	r2, r3, #1
 8005014:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	4413      	add	r3, r2
 800501c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800501e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005020:	085b      	lsrs	r3, r3, #1
 8005022:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <gen_numname+0x5e>
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005034:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005038:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	3301      	adds	r3, #1
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	2b0f      	cmp	r3, #15
 8005044:	d9e4      	bls.n	8005010 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1d8      	bne.n	8005000 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005052:	2307      	movs	r3, #7
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	b2db      	uxtb	r3, r3
 8005060:	3330      	adds	r3, #48	; 0x30
 8005062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005066:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800506a:	2b39      	cmp	r3, #57	; 0x39
 800506c:	d904      	bls.n	8005078 <gen_numname+0x9c>
 800506e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005072:	3307      	adds	r3, #7
 8005074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	62ba      	str	r2, [r7, #40]	; 0x28
 800507e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005082:	4413      	add	r3, r2
 8005084:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005088:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	091b      	lsrs	r3, r3, #4
 8005090:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1de      	bne.n	8005056 <gen_numname+0x7a>
	ns[i] = '~';
 8005098:	f107 0214 	add.w	r2, r7, #20
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	4413      	add	r3, r2
 80050a0:	227e      	movs	r2, #126	; 0x7e
 80050a2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80050a4:	2300      	movs	r3, #0
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
 80050a8:	e002      	b.n	80050b0 <gen_numname+0xd4>
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	3301      	adds	r3, #1
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
 80050b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d205      	bcs.n	80050c4 <gen_numname+0xe8>
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	4413      	add	r3, r2
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d1f2      	bne.n	80050aa <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	2b07      	cmp	r3, #7
 80050c8:	d808      	bhi.n	80050dc <gen_numname+0x100>
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80050d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80050d4:	4413      	add	r3, r2
 80050d6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80050da:	e000      	b.n	80050de <gen_numname+0x102>
 80050dc:	2120      	movs	r1, #32
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	627a      	str	r2, [r7, #36]	; 0x24
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	460a      	mov	r2, r1
 80050ea:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	2b07      	cmp	r3, #7
 80050f0:	d9e8      	bls.n	80050c4 <gen_numname+0xe8>
}
 80050f2:	bf00      	nop
 80050f4:	3730      	adds	r7, #48	; 0x30
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b085      	sub	sp, #20
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005106:	230b      	movs	r3, #11
 8005108:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	b2da      	uxtb	r2, r3
 800510e:	0852      	lsrs	r2, r2, #1
 8005110:	01db      	lsls	r3, r3, #7
 8005112:	4313      	orrs	r3, r2
 8005114:	b2da      	uxtb	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	1c59      	adds	r1, r3, #1
 800511a:	6079      	str	r1, [r7, #4]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	4413      	add	r3, r2
 8005120:	73fb      	strb	r3, [r7, #15]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	3b01      	subs	r3, #1
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1ed      	bne.n	800510a <sum_sfn+0x10>
	return sum;
 800512e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr

0800513a <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b086      	sub	sp, #24
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005142:	2100      	movs	r1, #0
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff fb84 	bl	8004852 <dir_sdi>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800514e:	7dfb      	ldrb	r3, [r7, #23]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <dir_find+0x1e>
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	e0c1      	b.n	80052dc <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005158:	23ff      	movs	r3, #255	; 0xff
 800515a:	753b      	strb	r3, [r7, #20]
 800515c:	7d3b      	ldrb	r3, [r7, #20]
 800515e:	757b      	strb	r3, [r7, #21]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005166:	3304      	adds	r3, #4
 8005168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800516c:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517c:	3310      	adds	r3, #16
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f7fe fe80 	bl	8003e88 <move_window>
 8005188:	4603      	mov	r3, r0
 800518a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f040 809e 	bne.w	80052d0 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519a:	3314      	adds	r3, #20
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80051a6:	7dbb      	ldrb	r3, [r7, #22]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <dir_find+0x78>
 80051ac:	2304      	movs	r3, #4
 80051ae:	75fb      	strb	r3, [r7, #23]
 80051b0:	e093      	b.n	80052da <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	330b      	adds	r3, #11
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051bc:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80051be:	7dbb      	ldrb	r3, [r7, #22]
 80051c0:	2be5      	cmp	r3, #229	; 0xe5
 80051c2:	d007      	beq.n	80051d4 <dir_find+0x9a>
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00c      	beq.n	80051e8 <dir_find+0xae>
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	2b0f      	cmp	r3, #15
 80051d2:	d009      	beq.n	80051e8 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80051d4:	23ff      	movs	r3, #255	; 0xff
 80051d6:	757b      	strb	r3, [r7, #21]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80051de:	3304      	adds	r3, #4
 80051e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	e068      	b.n	80052ba <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b0f      	cmp	r3, #15
 80051ec:	d139      	bne.n	8005262 <dir_find+0x128>
				if (dp->lfn) {
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d05f      	beq.n	80052ba <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80051fa:	7dbb      	ldrb	r3, [r7, #22]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d012      	beq.n	800522a <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	7b5b      	ldrb	r3, [r3, #13]
 8005208:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800520a:	7dbb      	ldrb	r3, [r7, #22]
 800520c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005210:	75bb      	strb	r3, [r7, #22]
 8005212:	7dbb      	ldrb	r3, [r7, #22]
 8005214:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521c:	3306      	adds	r3, #6
 800521e:	881a      	ldrh	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005226:	3304      	adds	r3, #4
 8005228:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800522a:	7dba      	ldrb	r2, [r7, #22]
 800522c:	7d7b      	ldrb	r3, [r7, #21]
 800522e:	429a      	cmp	r2, r3
 8005230:	d114      	bne.n	800525c <dir_find+0x122>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	330d      	adds	r3, #13
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	7d3a      	ldrb	r2, [r7, #20]
 800523a:	429a      	cmp	r2, r3
 800523c:	d10e      	bne.n	800525c <dir_find+0x122>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6939      	ldr	r1, [r7, #16]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fde5 	bl	8004e18 <cmp_lfn>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <dir_find+0x122>
 8005254:	7d7b      	ldrb	r3, [r7, #21]
 8005256:	3b01      	subs	r3, #1
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e000      	b.n	800525e <dir_find+0x124>
 800525c:	23ff      	movs	r3, #255	; 0xff
 800525e:	757b      	strb	r3, [r7, #21]
 8005260:	e02b      	b.n	80052ba <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005262:	7d7b      	ldrb	r3, [r7, #21]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d107      	bne.n	8005278 <dir_find+0x13e>
 8005268:	6938      	ldr	r0, [r7, #16]
 800526a:	f7ff ff46 	bl	80050fa <sum_sfn>
 800526e:	4603      	mov	r3, r0
 8005270:	461a      	mov	r2, r3
 8005272:	7d3b      	ldrb	r3, [r7, #20]
 8005274:	4293      	cmp	r3, r2
 8005276:	d02d      	beq.n	80052d4 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800527e:	3318      	adds	r3, #24
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330b      	adds	r3, #11
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10c      	bne.n	80052a8 <dir_find+0x16e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005294:	3318      	adds	r3, #24
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	220b      	movs	r2, #11
 800529a:	4619      	mov	r1, r3
 800529c:	6938      	ldr	r0, [r7, #16]
 800529e:	f7fe fb97 	bl	80039d0 <mem_cmp>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d017      	beq.n	80052d8 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80052a8:	23ff      	movs	r3, #255	; 0xff
 80052aa:	757b      	strb	r3, [r7, #21]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80052b2:	3304      	adds	r3, #4
 80052b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052b8:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80052ba:	2100      	movs	r1, #0
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff fba3 	bl	8004a08 <dir_next>
 80052c2:	4603      	mov	r3, r0
 80052c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80052c6:	7dfb      	ldrb	r3, [r7, #23]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f43f af50 	beq.w	800516e <dir_find+0x34>
 80052ce:	e004      	b.n	80052da <dir_find+0x1a0>
		if (res != FR_OK) break;
 80052d0:	bf00      	nop
 80052d2:	e002      	b.n	80052da <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80052d4:	bf00      	nop
 80052d6:	e000      	b.n	80052da <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80052d8:	bf00      	nop

	return res;
 80052da:	7dfb      	ldrb	r3, [r7, #23]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08c      	sub	sp, #48	; 0x30
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f2:	3318      	adds	r3, #24
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	623b      	str	r3, [r7, #32]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8005302:	f107 030c 	add.w	r3, r7, #12
 8005306:	220c      	movs	r2, #12
 8005308:	6a39      	ldr	r1, [r7, #32]
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fb2a 	bl	8003964 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005310:	7dfb      	ldrb	r3, [r7, #23]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d039      	beq.n	800538e <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	330b      	adds	r3, #11
 800531e:	2200      	movs	r2, #0
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 800532c:	2301      	movs	r3, #1
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005330:	e013      	b.n	800535a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8005332:	f107 010c 	add.w	r1, r7, #12
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	6a38      	ldr	r0, [r7, #32]
 800533c:	f7ff fe4e 	bl	8004fdc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff fefa 	bl	800513a <dir_find>
 8005346:	4603      	mov	r3, r0
 8005348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800534c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005350:	2b00      	cmp	r3, #0
 8005352:	d106      	bne.n	8005362 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	3301      	adds	r3, #1
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	2b63      	cmp	r3, #99	; 0x63
 800535e:	d9e8      	bls.n	8005332 <dir_register+0x4e>
 8005360:	e000      	b.n	8005364 <dir_register+0x80>
			if (res != FR_OK) break;
 8005362:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	2b64      	cmp	r3, #100	; 0x64
 8005368:	d101      	bne.n	800536e <dir_register+0x8a>
 800536a:	2307      	movs	r3, #7
 800536c:	e0e3      	b.n	8005536 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800536e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005372:	2b04      	cmp	r3, #4
 8005374:	d002      	beq.n	800537c <dir_register+0x98>
 8005376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800537a:	e0dc      	b.n	8005536 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	330b      	adds	r3, #11
 8005380:	7dfa      	ldrb	r2, [r7, #23]
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800538e:	7dfb      	ldrb	r3, [r7, #23]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d014      	beq.n	80053c2 <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 8005398:	2300      	movs	r3, #0
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28
 800539c:	e002      	b.n	80053a4 <dir_register+0xc0>
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	3301      	adds	r3, #1
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1f5      	bne.n	800539e <dir_register+0xba>
		nent = (n + 25) / 13;
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	3319      	adds	r3, #25
 80053b6:	4a62      	ldr	r2, [pc, #392]	; (8005540 <dir_register+0x25c>)
 80053b8:	fba2 2303 	umull	r2, r3, r2, r3
 80053bc:	089b      	lsrs	r3, r3, #2
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
 80053c0:	e001      	b.n	80053c6 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80053c2:	2301      	movs	r3, #1
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80053c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fc7f 	bl	8004ccc <dir_alloc>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80053d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d160      	bne.n	800549e <dir_register+0x1ba>
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	3b01      	subs	r3, #1
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d05a      	beq.n	800549e <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ee:	3306      	adds	r3, #6
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff fa29 	bl	8004852 <dir_sdi>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800540a:	2b00      	cmp	r3, #0
 800540c:	d147      	bne.n	800549e <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005414:	3318      	adds	r3, #24
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff fe6e 	bl	80050fa <sum_sfn>
 800541e:	4603      	mov	r3, r0
 8005420:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005430:	3310      	adds	r3, #16
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f7fe fd26 	bl	8003e88 <move_window>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005446:	2b00      	cmp	r3, #0
 8005448:	d128      	bne.n	800549c <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005458:	3314      	adds	r3, #20
 800545a:	6819      	ldr	r1, [r3, #0]
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	b2da      	uxtb	r2, r3
 8005460:	7efb      	ldrb	r3, [r7, #27]
 8005462:	f7ff fd47 	bl	8004ef4 <fit_lfn>
				dp->fs->wflag = 1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005472:	3304      	adds	r3, #4
 8005474:	2201      	movs	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8005478:	2100      	movs	r1, #0
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff fac4 	bl	8004a08 <dir_next>
 8005480:	4603      	mov	r3, r0
 8005482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800548a:	2b00      	cmp	r3, #0
 800548c:	d107      	bne.n	800549e <dir_register+0x1ba>
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	3b01      	subs	r3, #1
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1c3      	bne.n	8005422 <dir_register+0x13e>
 800549a:	e000      	b.n	800549e <dir_register+0x1ba>
				if (res != FR_OK) break;
 800549c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800549e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d145      	bne.n	8005532 <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b4:	3310      	adds	r3, #16
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4619      	mov	r1, r3
 80054ba:	4610      	mov	r0, r2
 80054bc:	f7fe fce4 	bl	8003e88 <move_window>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80054c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d131      	bne.n	8005532 <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d4:	3314      	adds	r3, #20
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2220      	movs	r2, #32
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fe fa5e 	bl	800399e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e8:	3314      	adds	r3, #20
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f2:	3318      	adds	r3, #24
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	220b      	movs	r2, #11
 80054f8:	4619      	mov	r1, r3
 80054fa:	f7fe fa33 	bl	8003964 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005504:	3318      	adds	r3, #24
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	330b      	adds	r3, #11
 800550a:	781a      	ldrb	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005512:	3314      	adds	r3, #20
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	f002 0218 	and.w	r2, r2, #24
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552c:	3304      	adds	r3, #4
 800552e:	2201      	movs	r2, #1
 8005530:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 8005532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005536:	4618      	mov	r0, r3
 8005538:	3730      	adds	r7, #48	; 0x30
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	4ec4ec4f 	.word	0x4ec4ec4f

08005544 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	; 0x28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	e002      	b.n	800555c <create_name+0x18>
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	3301      	adds	r3, #1
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b2f      	cmp	r3, #47	; 0x2f
 8005562:	d0f8      	beq.n	8005556 <create_name+0x12>
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b5c      	cmp	r3, #92	; 0x5c
 800556a:	d0f4      	beq.n	8005556 <create_name+0x12>
	lfn = dp->lfn;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	61ba      	str	r2, [r7, #24]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4413      	add	r3, r2
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800558c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800558e:	2b1f      	cmp	r3, #31
 8005590:	d92f      	bls.n	80055f2 <create_name+0xae>
 8005592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005594:	2b2f      	cmp	r3, #47	; 0x2f
 8005596:	d02c      	beq.n	80055f2 <create_name+0xae>
 8005598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800559a:	2b5c      	cmp	r3, #92	; 0x5c
 800559c:	d029      	beq.n	80055f2 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2bfe      	cmp	r3, #254	; 0xfe
 80055a2:	d901      	bls.n	80055a8 <create_name+0x64>
			return FR_INVALID_NAME;
 80055a4:	2306      	movs	r3, #6
 80055a6:	e18b      	b.n	80058c0 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80055a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80055ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055b0:	2101      	movs	r1, #1
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 fd4a 	bl	800704c <ff_convert>
 80055b8:	4603      	mov	r3, r0
 80055ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80055bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <create_name+0x82>
 80055c2:	2306      	movs	r3, #6
 80055c4:	e17c      	b.n	80058c0 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80055c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055c8:	2b7f      	cmp	r3, #127	; 0x7f
 80055ca:	d809      	bhi.n	80055e0 <create_name+0x9c>
 80055cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055ce:	4619      	mov	r1, r3
 80055d0:	488f      	ldr	r0, [pc, #572]	; (8005810 <create_name+0x2cc>)
 80055d2:	f7fe fa23 	bl	8003a1c <chk_chr>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <create_name+0x9c>
			return FR_INVALID_NAME;
 80055dc:	2306      	movs	r3, #6
 80055de:	e16f      	b.n	80058c0 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	617a      	str	r2, [r7, #20]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80055f0:	e7c5      	b.n	800557e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	441a      	add	r2, r3
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80055fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055fe:	2b1f      	cmp	r3, #31
 8005600:	d801      	bhi.n	8005606 <create_name+0xc2>
 8005602:	2304      	movs	r3, #4
 8005604:	e000      	b.n	8005608 <create_name+0xc4>
 8005606:	2300      	movs	r3, #0
 8005608:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800560c:	e011      	b.n	8005632 <create_name+0xee>
		w = lfn[di - 1];
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005614:	3b01      	subs	r3, #1
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005622:	2b20      	cmp	r3, #32
 8005624:	d002      	beq.n	800562c <create_name+0xe8>
 8005626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005628:	2b2e      	cmp	r3, #46	; 0x2e
 800562a:	d106      	bne.n	800563a <create_name+0xf6>
		di--;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	3b01      	subs	r3, #1
 8005630:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1ea      	bne.n	800560e <create_name+0xca>
 8005638:	e000      	b.n	800563c <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800563a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <create_name+0x102>
 8005642:	2306      	movs	r3, #6
 8005644:	e13c      	b.n	80058c0 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	2200      	movs	r2, #0
 8005650:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005658:	3318      	adds	r3, #24
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	220b      	movs	r2, #11
 800565e:	2120      	movs	r1, #32
 8005660:	4618      	mov	r0, r3
 8005662:	f7fe f99c 	bl	800399e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	e002      	b.n	8005672 <create_name+0x12e>
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	3301      	adds	r3, #1
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	2b20      	cmp	r3, #32
 800567e:	d0f5      	beq.n	800566c <create_name+0x128>
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	2b2e      	cmp	r3, #46	; 0x2e
 800568c:	d0ee      	beq.n	800566c <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d009      	beq.n	80056a8 <create_name+0x164>
 8005694:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005698:	f043 0303 	orr.w	r3, r3, #3
 800569c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80056a0:	e002      	b.n	80056a8 <create_name+0x164>
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <create_name+0x17e>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80056b4:	3b01      	subs	r3, #1
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	2b2e      	cmp	r3, #46	; 0x2e
 80056c0:	d1ef      	bne.n	80056a2 <create_name+0x15e>

	b = i = 0; ni = 8;
 80056c2:	2300      	movs	r3, #0
 80056c4:	623b      	str	r3, [r7, #32]
 80056c6:	2300      	movs	r3, #0
 80056c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80056cc:	2308      	movs	r3, #8
 80056ce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	61ba      	str	r2, [r7, #24]
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80056e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 8092 	beq.w	800580c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80056e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d006      	beq.n	80056fc <create_name+0x1b8>
 80056ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056f0:	2b2e      	cmp	r3, #46	; 0x2e
 80056f2:	d10a      	bne.n	800570a <create_name+0x1c6>
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d006      	beq.n	800570a <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 80056fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005700:	f043 0303 	orr.w	r3, r3, #3
 8005704:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005708:	e07f      	b.n	800580a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800570a:	6a3a      	ldr	r2, [r7, #32]
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	429a      	cmp	r2, r3
 8005710:	d203      	bcs.n	800571a <create_name+0x1d6>
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	429a      	cmp	r2, r3
 8005718:	d123      	bne.n	8005762 <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	2b0b      	cmp	r3, #11
 800571e:	d106      	bne.n	800572e <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 8005720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005724:	f043 0303 	orr.w	r3, r3, #3
 8005728:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800572c:	e077      	b.n	800581e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	429a      	cmp	r2, r3
 8005734:	d005      	beq.n	8005742 <create_name+0x1fe>
 8005736:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800573a:	f043 0303 	orr.w	r3, r3, #3
 800573e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	429a      	cmp	r2, r3
 8005748:	d868      	bhi.n	800581c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	2308      	movs	r3, #8
 8005750:	623b      	str	r3, [r7, #32]
 8005752:	230b      	movs	r3, #11
 8005754:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005760:	e053      	b.n	800580a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005764:	2b7f      	cmp	r3, #127	; 0x7f
 8005766:	d914      	bls.n	8005792 <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f001 fc6d 	bl	800704c <ff_convert>
 8005772:	4603      	mov	r3, r0
 8005774:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005778:	2b00      	cmp	r3, #0
 800577a:	d004      	beq.n	8005786 <create_name+0x242>
 800577c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800577e:	3b80      	subs	r3, #128	; 0x80
 8005780:	4a24      	ldr	r2, [pc, #144]	; (8005814 <create_name+0x2d0>)
 8005782:	5cd3      	ldrb	r3, [r2, r3]
 8005784:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005786:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800578a:	f043 0302 	orr.w	r3, r3, #2
 800578e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <create_name+0x264>
 8005798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800579a:	4619      	mov	r1, r3
 800579c:	481e      	ldr	r0, [pc, #120]	; (8005818 <create_name+0x2d4>)
 800579e:	f7fe f93d 	bl	8003a1c <chk_chr>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80057a8:	235f      	movs	r3, #95	; 0x5f
 80057aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80057ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80057b0:	f043 0303 	orr.w	r3, r3, #3
 80057b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80057b8:	e01b      	b.n	80057f2 <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80057ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057bc:	2b40      	cmp	r3, #64	; 0x40
 80057be:	d909      	bls.n	80057d4 <create_name+0x290>
 80057c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057c2:	2b5a      	cmp	r3, #90	; 0x5a
 80057c4:	d806      	bhi.n	80057d4 <create_name+0x290>
					b |= 2;
 80057c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057ca:	f043 0302 	orr.w	r3, r3, #2
 80057ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057d2:	e00e      	b.n	80057f2 <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80057d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057d6:	2b60      	cmp	r3, #96	; 0x60
 80057d8:	d90b      	bls.n	80057f2 <create_name+0x2ae>
 80057da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057dc:	2b7a      	cmp	r3, #122	; 0x7a
 80057de:	d808      	bhi.n	80057f2 <create_name+0x2ae>
						b |= 1; w -= 0x20;
 80057e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ee:	3b20      	subs	r3, #32
 80057f0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f8:	3318      	adds	r3, #24
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	1c59      	adds	r1, r3, #1
 8005800:	6239      	str	r1, [r7, #32]
 8005802:	4413      	add	r3, r2
 8005804:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800580a:	e761      	b.n	80056d0 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 800580c:	bf00      	nop
 800580e:	e006      	b.n	800581e <create_name+0x2da>
 8005810:	080071c8 	.word	0x080071c8
 8005814:	08007228 	.word	0x08007228
 8005818:	080071d4 	.word	0x080071d4
			if (si > di) break;			/* No extension */
 800581c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005824:	3318      	adds	r3, #24
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2be5      	cmp	r3, #229	; 0xe5
 800582c:	d106      	bne.n	800583c <create_name+0x2f8>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005834:	3318      	adds	r3, #24
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2205      	movs	r2, #5
 800583a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	2b08      	cmp	r3, #8
 8005840:	d104      	bne.n	800584c <create_name+0x308>
 8005842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800584c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005850:	f003 030c 	and.w	r3, r3, #12
 8005854:	2b0c      	cmp	r3, #12
 8005856:	d005      	beq.n	8005864 <create_name+0x320>
 8005858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	2b03      	cmp	r3, #3
 8005862:	d105      	bne.n	8005870 <create_name+0x32c>
		cf |= NS_LFN;
 8005864:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005868:	f043 0302 	orr.w	r3, r3, #2
 800586c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005870:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d117      	bne.n	80058ac <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800587c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d105      	bne.n	8005894 <create_name+0x350>
 8005888:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800588c:	f043 0310 	orr.w	r3, r3, #16
 8005890:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005898:	f003 030c 	and.w	r3, r3, #12
 800589c:	2b04      	cmp	r3, #4
 800589e:	d105      	bne.n	80058ac <create_name+0x368>
 80058a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058a4:	f043 0308 	orr.w	r3, r3, #8
 80058a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b2:	3318      	adds	r3, #24
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330b      	adds	r3, #11
 80058b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80058bc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80058be:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3728      	adds	r7, #40	; 0x28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b2f      	cmp	r3, #47	; 0x2f
 80058d8:	d003      	beq.n	80058e2 <follow_path+0x1a>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b5c      	cmp	r3, #92	; 0x5c
 80058e0:	d102      	bne.n	80058e8 <follow_path+0x20>
		path++;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	3301      	adds	r3, #1
 80058e6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ee:	3308      	adds	r3, #8
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b1f      	cmp	r3, #31
 80058fa:	d80c      	bhi.n	8005916 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80058fc:	2100      	movs	r1, #0
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fe ffa7 	bl	8004852 <dir_sdi>
 8005904:	4603      	mov	r3, r0
 8005906:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590e:	3314      	adds	r3, #20
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e04c      	b.n	80059b0 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005916:	463b      	mov	r3, r7
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fe12 	bl	8005544 <create_name>
 8005920:	4603      	mov	r3, r0
 8005922:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d13d      	bne.n	80059a6 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fc05 	bl	800513a <dir_find>
 8005930:	4603      	mov	r3, r0
 8005932:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593a:	3318      	adds	r3, #24
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	7adb      	ldrb	r3, [r3, #11]
 8005940:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b04      	cmp	r3, #4
 800594c:	d12d      	bne.n	80059aa <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800594e:	7bbb      	ldrb	r3, [r7, #14]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d128      	bne.n	80059aa <follow_path+0xe2>
 8005958:	2305      	movs	r3, #5
 800595a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800595c:	e025      	b.n	80059aa <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800595e:	7bbb      	ldrb	r3, [r7, #14]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d122      	bne.n	80059ae <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800596e:	3314      	adds	r3, #20
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	330b      	adds	r3, #11
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	f003 0310 	and.w	r3, r3, #16
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 8005982:	2305      	movs	r3, #5
 8005984:	73fb      	strb	r3, [r7, #15]
 8005986:	e013      	b.n	80059b0 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff f9eb 	bl	8004d6e <ld_clust>
 8005998:	4602      	mov	r2, r0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a0:	3308      	adds	r3, #8
 80059a2:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80059a4:	e7b7      	b.n	8005916 <follow_path+0x4e>
			if (res != FR_OK) break;
 80059a6:	bf00      	nop
 80059a8:	e002      	b.n	80059b0 <follow_path+0xe8>
				break;
 80059aa:	bf00      	nop
 80059ac:	e000      	b.n	80059b0 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80059ae:	bf00      	nop
		}
	}

	return res;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b087      	sub	sp, #28
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80059c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d031      	beq.n	8005a34 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	e002      	b.n	80059de <get_ldnumber+0x24>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3301      	adds	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b1f      	cmp	r3, #31
 80059e4:	d903      	bls.n	80059ee <get_ldnumber+0x34>
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b3a      	cmp	r3, #58	; 0x3a
 80059ec:	d1f4      	bne.n	80059d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b3a      	cmp	r3, #58	; 0x3a
 80059f4:	d11c      	bne.n	8005a30 <get_ldnumber+0x76>
			tp = *path;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	60fa      	str	r2, [r7, #12]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	3b30      	subs	r3, #48	; 0x30
 8005a06:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b09      	cmp	r3, #9
 8005a0c:	d80e      	bhi.n	8005a2c <get_ldnumber+0x72>
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d10a      	bne.n	8005a2c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d107      	bne.n	8005a2c <get_ldnumber+0x72>
					vol = (int)i;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	3301      	adds	r3, #1
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	e002      	b.n	8005a36 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005a30:	2300      	movs	r3, #0
 8005a32:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005a34:	693b      	ldr	r3, [r7, #16]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a50:	3304      	adds	r3, #4
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a62:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005a64:	6839      	ldr	r1, [r7, #0]
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fe fa0e 	bl	8003e88 <move_window>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <check_fs+0x36>
		return 3;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e04a      	b.n	8005b0c <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	b21a      	sxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005a8a:	b21b      	sxth	r3, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	b21b      	sxth	r3, r3
 8005a90:	4a20      	ldr	r2, [pc, #128]	; (8005b14 <check_fs+0xd4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d001      	beq.n	8005a9a <check_fs+0x5a>
		return 2;
 8005a96:	2302      	movs	r3, #2
 8005a98:	e038      	b.n	8005b0c <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3336      	adds	r3, #54	; 0x36
 8005a9e:	3303      	adds	r3, #3
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	061a      	lsls	r2, r3, #24
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3336      	adds	r3, #54	; 0x36
 8005aa8:	3302      	adds	r3, #2
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	041b      	lsls	r3, r3, #16
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	3236      	adds	r2, #54	; 0x36
 8005ab4:	3201      	adds	r2, #1
 8005ab6:	7812      	ldrb	r2, [r2, #0]
 8005ab8:	0212      	lsls	r2, r2, #8
 8005aba:	4313      	orrs	r3, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ac8:	4a13      	ldr	r2, [pc, #76]	; (8005b18 <check_fs+0xd8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d101      	bne.n	8005ad2 <check_fs+0x92>
		return 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e01c      	b.n	8005b0c <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3352      	adds	r3, #82	; 0x52
 8005ad6:	3303      	adds	r3, #3
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	061a      	lsls	r2, r3, #24
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3352      	adds	r3, #82	; 0x52
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	041b      	lsls	r3, r3, #16
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	3252      	adds	r2, #82	; 0x52
 8005aec:	3201      	adds	r2, #1
 8005aee:	7812      	ldrb	r2, [r2, #0]
 8005af0:	0212      	lsls	r2, r2, #8
 8005af2:	4313      	orrs	r3, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b00:	4a05      	ldr	r2, [pc, #20]	; (8005b18 <check_fs+0xd8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d101      	bne.n	8005b0a <check_fs+0xca>
		return 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e000      	b.n	8005b0c <check_fs+0xcc>

	return 1;
 8005b0a:	2301      	movs	r3, #1
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	ffffaa55 	.word	0xffffaa55
 8005b18:	00544146 	.word	0x00544146

08005b1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b096      	sub	sp, #88	; 0x58
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005b30:	68b8      	ldr	r0, [r7, #8]
 8005b32:	f7ff ff42 	bl	80059ba <get_ldnumber>
 8005b36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	da01      	bge.n	8005b42 <find_volume+0x26>
 8005b3e:	230b      	movs	r3, #11
 8005b40:	e33c      	b.n	80061bc <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005b42:	4ab3      	ldr	r2, [pc, #716]	; (8005e10 <find_volume+0x2f4>)
 8005b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <find_volume+0x3a>
 8005b52:	230c      	movs	r3, #12
 8005b54:	e332      	b.n	80061bc <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b5a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01d      	beq.n	8005ba4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6e:	3301      	adds	r3, #1
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fd fe58 	bl	8003828 <disk_status>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005b7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10c      	bne.n	8005ba4 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005b8a:	79fb      	ldrb	r3, [r7, #7]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <find_volume+0x84>
 8005b90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8005b9c:	230a      	movs	r3, #10
 8005b9e:	e30d      	b.n	80061bc <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e30b      	b.n	80061bc <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005baa:	2200      	movs	r2, #0
 8005bac:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb8:	3301      	adds	r3, #1
 8005bba:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fd fe48 	bl	800385c <disk_initialize>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005bd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005bde:	2303      	movs	r3, #3
 8005be0:	e2ec      	b.n	80061bc <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d007      	beq.n	8005bf8 <find_volume+0xdc>
 8005be8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8005bf4:	230a      	movs	r3, #10
 8005bf6:	e2e1      	b.n	80061bc <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfe:	3301      	adds	r3, #1
 8005c00:	7818      	ldrb	r0, [r3, #0]
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c08:	330a      	adds	r3, #10
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2102      	movs	r1, #2
 8005c0e:	f7fd fe8b 	bl	8003928 <disk_ioctl>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10f      	bne.n	8005c38 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c1e:	330a      	adds	r3, #10
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c26:	d307      	bcc.n	8005c38 <find_volume+0x11c>
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2e:	330a      	adds	r3, #10
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	d901      	bls.n	8005c3c <find_volume+0x120>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e2bf      	b.n	80061bc <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005c40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c44:	f7ff fefc 	bl	8005a40 <check_fs>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005c4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d155      	bne.n	8005d02 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005c56:	2300      	movs	r3, #0
 8005c58:	643b      	str	r3, [r7, #64]	; 0x40
 8005c5a:	e029      	b.n	8005cb0 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005c66:	4413      	add	r3, r2
 8005c68:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d012      	beq.n	8005c9a <find_volume+0x17e>
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	330b      	adds	r3, #11
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	061a      	lsls	r2, r3, #24
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7e:	330a      	adds	r3, #10
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	4313      	orrs	r3, r2
 8005c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c88:	3209      	adds	r2, #9
 8005c8a:	7812      	ldrb	r2, [r2, #0]
 8005c8c:	0212      	lsls	r2, r2, #8
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c92:	3208      	adds	r2, #8
 8005c94:	7812      	ldrb	r2, [r2, #0]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	e000      	b.n	8005c9c <find_volume+0x180>
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005ca4:	440b      	add	r3, r1
 8005ca6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cac:	3301      	adds	r3, #1
 8005cae:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d9d2      	bls.n	8005c5c <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <find_volume+0x1aa>
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005cce:	4413      	add	r3, r2
 8005cd0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005cd4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <find_volume+0x1cc>
 8005cdc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ce0:	f7ff feae 	bl	8005a40 <check_fs>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	e000      	b.n	8005cea <find_volume+0x1ce>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005cee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d005      	beq.n	8005d02 <find_volume+0x1e6>
 8005cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	643b      	str	r3, [r7, #64]	; 0x40
 8005cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d9e1      	bls.n	8005cc6 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005d02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d101      	bne.n	8005d0e <find_volume+0x1f2>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e256      	b.n	80061bc <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005d0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <find_volume+0x1fe>
 8005d16:	230d      	movs	r3, #13
 8005d18:	e250      	b.n	80061bc <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	7b1b      	ldrb	r3, [r3, #12]
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	b21a      	sxth	r2, r3
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	7adb      	ldrb	r3, [r3, #11]
 8005d26:	b21b      	sxth	r3, r3
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	b21b      	sxth	r3, r3
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d34:	330a      	adds	r3, #10
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d001      	beq.n	8005d40 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8005d3c:	230d      	movs	r3, #13
 8005d3e:	e23d      	b.n	80061bc <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	7ddb      	ldrb	r3, [r3, #23]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	b21a      	sxth	r2, r3
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	7d9b      	ldrb	r3, [r3, #22]
 8005d4c:	b21b      	sxth	r3, r3
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	b21b      	sxth	r3, r3
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d112      	bne.n	8005d82 <find_volume+0x266>
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005d62:	061a      	lsls	r2, r3, #24
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005d6a:	041b      	lsls	r3, r3, #16
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d70:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005d74:	0212      	lsls	r2, r2, #8
 8005d76:	4313      	orrs	r3, r2
 8005d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d7a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d88:	3318      	adds	r3, #24
 8005d8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d8c:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	7c1a      	ldrb	r2, [r3, #16]
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d98:	3303      	adds	r3, #3
 8005d9a:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da2:	3303      	adds	r3, #3
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d008      	beq.n	8005dbc <find_volume+0x2a0>
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db0:	3303      	adds	r3, #3
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d001      	beq.n	8005dbc <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8005db8:	230d      	movs	r3, #13
 8005dba:	e1ff      	b.n	80061bc <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc2:	3303      	adds	r3, #3
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dca:	fb02 f303 	mul.w	r3, r2, r3
 8005dce:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	7b5a      	ldrb	r2, [r3, #13]
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dda:	3302      	adds	r3, #2
 8005ddc:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de4:	3302      	adds	r3, #2
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00e      	beq.n	8005e0a <find_volume+0x2ee>
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df2:	3302      	adds	r3, #2
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfe:	3302      	adds	r3, #2
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8005e0a:	230d      	movs	r3, #13
 8005e0c:	e1d6      	b.n	80061bc <find_volume+0x6a0>
 8005e0e:	bf00      	nop
 8005e10:	20000044 	.word	0x20000044

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	7c9b      	ldrb	r3, [r3, #18]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	b21a      	sxth	r2, r3
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	7c5b      	ldrb	r3, [r3, #17]
 8005e20:	b21b      	sxth	r3, r3
 8005e22:	4313      	orrs	r3, r2
 8005e24:	b21b      	sxth	r3, r3
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2e:	3308      	adds	r3, #8
 8005e30:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e38:	3308      	adds	r3, #8
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e42:	330a      	adds	r3, #10
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e4e:	fb03 f301 	mul.w	r3, r3, r1
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8005e5a:	230d      	movs	r3, #13
 8005e5c:	e1ae      	b.n	80061bc <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	7d1b      	ldrb	r3, [r3, #20]
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	b21a      	sxth	r2, r3
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	7cdb      	ldrb	r3, [r3, #19]
 8005e6a:	b21b      	sxth	r3, r3
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	b21b      	sxth	r3, r3
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d112      	bne.n	8005ea0 <find_volume+0x384>
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005e80:	061a      	lsls	r2, r3, #24
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005e88:	041b      	lsls	r3, r3, #16
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e8e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005e92:	0212      	lsls	r2, r2, #8
 8005e94:	4313      	orrs	r3, r2
 8005e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e98:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	7bdb      	ldrb	r3, [r3, #15]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	b21a      	sxth	r2, r3
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	7b9b      	ldrb	r3, [r3, #14]
 8005eac:	b21b      	sxth	r3, r3
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	b21b      	sxth	r3, r3
 8005eb2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005eb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <find_volume+0x3a2>
 8005eba:	230d      	movs	r3, #13
 8005ebc:	e17e      	b.n	80061bc <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005ebe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec2:	441a      	add	r2, r3
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eca:	3308      	adds	r3, #8
 8005ecc:	8819      	ldrh	r1, [r3, #0]
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed4:	330a      	adds	r3, #10
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	095b      	lsrs	r3, r3, #5
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	4413      	add	r3, r2
 8005ee4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d201      	bcs.n	8005ef2 <find_volume+0x3d6>
 8005eee:	230d      	movs	r3, #13
 8005ef0:	e164      	b.n	80061bc <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005efe:	3302      	adds	r3, #2
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <find_volume+0x3f6>
 8005f0e:	230d      	movs	r3, #13
 8005f10:	e154      	b.n	80061bc <find_volume+0x6a0>
	fmt = FS_FAT12;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d902      	bls.n	8005f28 <find_volume+0x40c>
 8005f22:	2302      	movs	r3, #2
 8005f24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d902      	bls.n	8005f38 <find_volume+0x41c>
 8005f32:	2303      	movs	r3, #3
 8005f34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	1c9a      	adds	r2, r3, #2
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f42:	3314      	adds	r3, #20
 8005f44:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f4c:	331c      	adds	r3, #28
 8005f4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f50:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005f52:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f56:	441a      	add	r2, r3
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005f5e:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8005f60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	441a      	add	r2, r3
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8005f70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d127      	bne.n	8005fc8 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f7e:	3308      	adds	r3, #8
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <find_volume+0x46e>
 8005f86:	230d      	movs	r3, #13
 8005f88:	e118      	b.n	80061bc <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005f90:	061a      	lsls	r2, r3, #24
 8005f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f94:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005f98:	041b      	lsls	r3, r3, #16
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f9e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005fa2:	0212      	lsls	r2, r2, #8
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005fac:	431a      	orrs	r2, r3
 8005fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fbe:	3314      	adds	r3, #20
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc6:	e030      	b.n	800602a <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fce:	3308      	adds	r3, #8
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <find_volume+0x4be>
 8005fd6:	230d      	movs	r3, #13
 8005fd8:	e0f0      	b.n	80061bc <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe4:	441a      	add	r2, r3
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005fec:	3304      	adds	r3, #4
 8005fee:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d106      	bne.n	8006006 <find_volume+0x4ea>
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ffe:	3314      	adds	r3, #20
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	e010      	b.n	8006028 <find_volume+0x50c>
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800600c:	3314      	adds	r3, #20
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4613      	mov	r3, r2
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	4413      	add	r3, r2
 8006016:	085a      	lsrs	r2, r3, #1
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800601e:	3314      	adds	r3, #20
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006028:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006030:	3318      	adds	r3, #24
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800603a:	330a      	adds	r3, #10
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	4619      	mov	r1, r3
 8006040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006042:	440b      	add	r3, r1
 8006044:	1e59      	subs	r1, r3, #1
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800604c:	330a      	adds	r3, #10
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	fbb1 f3f3 	udiv	r3, r1, r3
 8006054:	429a      	cmp	r2, r3
 8006056:	d201      	bcs.n	800605c <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8006058:	230d      	movs	r3, #13
 800605a:	e0af      	b.n	80061bc <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800605c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006062:	3310      	adds	r3, #16
 8006064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006070:	3310      	adds	r3, #16
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607a:	330c      	adds	r3, #12
 800607c:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006084:	3305      	adds	r3, #5
 8006086:	2280      	movs	r2, #128	; 0x80
 8006088:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800608a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800608e:	2b03      	cmp	r3, #3
 8006090:	d17d      	bne.n	800618e <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	b21a      	sxth	r2, r3
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060a2:	b21b      	sxth	r3, r3
 80060a4:	4313      	orrs	r3, r2
 80060a6:	b21b      	sxth	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d170      	bne.n	800618e <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 80060ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ae:	3301      	adds	r3, #1
 80060b0:	4619      	mov	r1, r3
 80060b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060b4:	f7fd fee8 	bl	8003e88 <move_window>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d167      	bne.n	800618e <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c4:	3305      	adds	r3, #5
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060cc:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	b21a      	sxth	r2, r3
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80060da:	b21b      	sxth	r3, r3
 80060dc:	4313      	orrs	r3, r2
 80060de:	b21b      	sxth	r3, r3
 80060e0:	4a38      	ldr	r2, [pc, #224]	; (80061c4 <find_volume+0x6a8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d153      	bne.n	800618e <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	78db      	ldrb	r3, [r3, #3]
 80060ea:	061a      	lsls	r2, r3, #24
 80060ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ee:	789b      	ldrb	r3, [r3, #2]
 80060f0:	041b      	lsls	r3, r3, #16
 80060f2:	4313      	orrs	r3, r2
 80060f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060f6:	7852      	ldrb	r2, [r2, #1]
 80060f8:	0212      	lsls	r2, r2, #8
 80060fa:	4313      	orrs	r3, r2
 80060fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060fe:	7812      	ldrb	r2, [r2, #0]
 8006100:	4313      	orrs	r3, r2
 8006102:	4a31      	ldr	r2, [pc, #196]	; (80061c8 <find_volume+0x6ac>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d142      	bne.n	800618e <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610a:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800610e:	061a      	lsls	r2, r3, #24
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006116:	041b      	lsls	r3, r3, #16
 8006118:	4313      	orrs	r3, r2
 800611a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800611c:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006120:	0212      	lsls	r2, r2, #8
 8006122:	4313      	orrs	r3, r2
 8006124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006126:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800612a:	4313      	orrs	r3, r2
 800612c:	4a27      	ldr	r2, [pc, #156]	; (80061cc <find_volume+0x6b0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d12d      	bne.n	800618e <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006138:	061a      	lsls	r2, r3, #24
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006140:	041b      	lsls	r3, r3, #16
 8006142:	4313      	orrs	r3, r2
 8006144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006146:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800614a:	0212      	lsls	r2, r2, #8
 800614c:	4313      	orrs	r3, r2
 800614e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006150:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006154:	431a      	orrs	r2, r3
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800615c:	3310      	adds	r3, #16
 800615e:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006162:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006166:	061a      	lsls	r2, r3, #24
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800616e:	041b      	lsls	r3, r3, #16
 8006170:	4313      	orrs	r3, r2
 8006172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006174:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006178:	0212      	lsls	r2, r2, #8
 800617a:	4313      	orrs	r3, r2
 800617c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800617e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006182:	431a      	orrs	r2, r3
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618a:	330c      	adds	r3, #12
 800618c:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006194:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006198:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800619a:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <find_volume+0x6b4>)
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	3301      	adds	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <find_volume+0x6b4>)
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <find_volume+0x6b4>)
 80061a8:	881a      	ldrh	r2, [r3, #0]
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061b0:	3306      	adds	r3, #6
 80061b2:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80061b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061b6:	f7fd fde5 	bl	8003d84 <clear_lock>
#endif

	return FR_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3758      	adds	r7, #88	; 0x58
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	ffffaa55 	.word	0xffffaa55
 80061c8:	41615252 	.word	0x41615252
 80061cc:	61417272 	.word	0x61417272
 80061d0:	20000048 	.word	0x20000048

080061d4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d02d      	beq.n	8006242 <validate+0x6e>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d027      	beq.n	8006242 <validate+0x6e>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01e      	beq.n	8006242 <validate+0x6e>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006210:	3306      	adds	r3, #6
 8006212:	881a      	ldrh	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621a:	3304      	adds	r3, #4
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d10f      	bne.n	8006242 <validate+0x6e>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800622e:	3301      	adds	r3, #1
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f7fd faf8 	bl	8003828 <disk_status>
 8006238:	4603      	mov	r3, r0
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <validate+0x72>
		return FR_INVALID_OBJECT;
 8006242:	2309      	movs	r3, #9
 8006244:	e000      	b.n	8006248 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	4613      	mov	r3, r2
 800625c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006262:	f107 0310 	add.w	r3, r7, #16
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fba7 	bl	80059ba <get_ldnumber>
 800626c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	2b00      	cmp	r3, #0
 8006272:	da01      	bge.n	8006278 <f_mount+0x28>
 8006274:	230b      	movs	r3, #11
 8006276:	e02f      	b.n	80062d8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006278:	4a19      	ldr	r2, [pc, #100]	; (80062e0 <f_mount+0x90>)
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006280:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d007      	beq.n	8006298 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006288:	69b8      	ldr	r0, [r7, #24]
 800628a:	f7fd fd7b 	bl	8003d84 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006294:	2200      	movs	r2, #0
 8006296:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d004      	beq.n	80062a8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a4:	2200      	movs	r2, #0
 80062a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	490d      	ldr	r1, [pc, #52]	; (80062e0 <f_mount+0x90>)
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <f_mount+0x6e>
 80062b8:	79fb      	ldrb	r3, [r7, #7]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d001      	beq.n	80062c2 <f_mount+0x72>
 80062be:	2300      	movs	r3, #0
 80062c0:	e00a      	b.n	80062d8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80062c2:	f107 0108 	add.w	r1, r7, #8
 80062c6:	f107 030c 	add.w	r3, r7, #12
 80062ca:	2200      	movs	r2, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff fc25 	bl	8005b1c <find_volume>
 80062d2:	4603      	mov	r3, r0
 80062d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000044 	.word	0x20000044

080062e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	f107 0318 	add.w	r3, r7, #24
 80062f2:	3b0c      	subs	r3, #12
 80062f4:	6018      	str	r0, [r3, #0]
 80062f6:	f107 0318 	add.w	r3, r7, #24
 80062fa:	3b10      	subs	r3, #16
 80062fc:	6019      	str	r1, [r3, #0]
 80062fe:	f107 0318 	add.w	r3, r7, #24
 8006302:	3b11      	subs	r3, #17
 8006304:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8006306:	f107 0318 	add.w	r3, r7, #24
 800630a:	3b0c      	subs	r3, #12
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <f_open+0x32>
 8006312:	2309      	movs	r3, #9
 8006314:	e319      	b.n	800694a <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 8006316:	f107 0318 	add.w	r3, r7, #24
 800631a:	3b0c      	subs	r3, #12
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006326:	f107 0318 	add.w	r3, r7, #24
 800632a:	3b11      	subs	r3, #17
 800632c:	f107 0218 	add.w	r2, r7, #24
 8006330:	3a11      	subs	r2, #17
 8006332:	7812      	ldrb	r2, [r2, #0]
 8006334:	f002 021f 	and.w	r2, r2, #31
 8006338:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800633a:	f107 0318 	add.w	r3, r7, #24
 800633e:	3b11      	subs	r3, #17
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	f023 0301 	bic.w	r3, r3, #1
 8006346:	b2da      	uxtb	r2, r3
 8006348:	f107 0118 	add.w	r1, r7, #24
 800634c:	3910      	subs	r1, #16
 800634e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006352:	3b18      	subs	r3, #24
 8006354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff fbdf 	bl	8005b1c <find_volume>
 800635e:	4603      	mov	r3, r0
 8006360:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006364:	f102 0217 	add.w	r2, r2, #23
 8006368:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800636a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800636e:	f103 0317 	add.w	r3, r3, #23
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f040 82e3 	bne.w	8006940 <f_open+0x65c>
		INIT_BUF(dj);
 800637a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800637e:	3b18      	subs	r3, #24
 8006380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006384:	3318      	adds	r3, #24
 8006386:	f107 0218 	add.w	r2, r7, #24
 800638a:	3a04      	subs	r2, #4
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006392:	3b18      	subs	r3, #24
 8006394:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006398:	4ad1      	ldr	r2, [pc, #836]	; (80066e0 <f_open+0x3fc>)
 800639a:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 800639c:	f107 0318 	add.w	r3, r7, #24
 80063a0:	3b10      	subs	r3, #16
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80063a8:	3b18      	subs	r3, #24
 80063aa:	4611      	mov	r1, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff fa8b 	bl	80058c8 <follow_path>
 80063b2:	4603      	mov	r3, r0
 80063b4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80063b8:	f102 0217 	add.w	r2, r2, #23
 80063bc:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80063be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80063c2:	3b18      	subs	r3, #24
 80063c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c8:	3314      	adds	r3, #20
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80063d0:	f102 0210 	add.w	r2, r2, #16
 80063d4:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80063d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80063da:	f103 0317 	add.w	r3, r3, #23
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d126      	bne.n	8006432 <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 80063e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80063e8:	f103 0310 	add.w	r3, r3, #16
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <f_open+0x11c>
				res = FR_INVALID_NAME;
 80063f2:	2306      	movs	r3, #6
 80063f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80063f8:	f102 0217 	add.w	r2, r2, #23
 80063fc:	7013      	strb	r3, [r2, #0]
 80063fe:	e018      	b.n	8006432 <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006400:	f107 0318 	add.w	r3, r7, #24
 8006404:	3b11      	subs	r3, #17
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	f023 0301 	bic.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	bf14      	ite	ne
 8006410:	2301      	movne	r3, #1
 8006412:	2300      	moveq	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800641c:	3b18      	subs	r3, #24
 800641e:	4611      	mov	r1, r2
 8006420:	4618      	mov	r0, r3
 8006422:	f7fd fb15 	bl	8003a50 <chk_lock>
 8006426:	4603      	mov	r3, r0
 8006428:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800642c:	f102 0217 	add.w	r2, r2, #23
 8006430:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006432:	f107 0318 	add.w	r3, r7, #24
 8006436:	3b11      	subs	r3, #17
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	f003 031c 	and.w	r3, r3, #28
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 8150 	beq.w	80066e4 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 8006444:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006448:	f103 0317 	add.w	r3, r3, #23
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d030      	beq.n	80064b4 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006452:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006456:	f103 0317 	add.w	r3, r3, #23
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b04      	cmp	r3, #4
 800645e:	d112      	bne.n	8006486 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006460:	f7fd fb68 	bl	8003b34 <enq_lock>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <f_open+0x196>
 800646a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800646e:	3b18      	subs	r3, #24
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe ff37 	bl	80052e4 <dir_register>
 8006476:	4603      	mov	r3, r0
 8006478:	e000      	b.n	800647c <f_open+0x198>
 800647a:	2312      	movs	r3, #18
 800647c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006480:	f102 0217 	add.w	r2, r2, #23
 8006484:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006486:	f107 0318 	add.w	r3, r7, #24
 800648a:	3b11      	subs	r3, #17
 800648c:	f107 0218 	add.w	r2, r7, #24
 8006490:	3a11      	subs	r2, #17
 8006492:	7812      	ldrb	r2, [r2, #0]
 8006494:	f042 0208 	orr.w	r2, r2, #8
 8006498:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800649a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800649e:	3b18      	subs	r3, #24
 80064a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a4:	3314      	adds	r3, #20
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80064ac:	f102 0210 	add.w	r2, r2, #16
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e01f      	b.n	80064f4 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80064b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80064b8:	f103 0310 	add.w	r3, r3, #16
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330b      	adds	r3, #11
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f003 0311 	and.w	r3, r3, #17
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d006      	beq.n	80064d8 <f_open+0x1f4>
					res = FR_DENIED;
 80064ca:	2307      	movs	r3, #7
 80064cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80064d0:	f102 0217 	add.w	r2, r2, #23
 80064d4:	7013      	strb	r3, [r2, #0]
 80064d6:	e00d      	b.n	80064f4 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80064d8:	f107 0318 	add.w	r3, r7, #24
 80064dc:	3b11      	subs	r3, #17
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <f_open+0x210>
						res = FR_EXIST;
 80064e8:	2308      	movs	r3, #8
 80064ea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80064ee:	f102 0217 	add.w	r2, r2, #23
 80064f2:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80064f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80064f8:	f103 0317 	add.w	r3, r3, #23
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f040 8122 	bne.w	8006748 <f_open+0x464>
 8006504:	f107 0318 	add.w	r3, r7, #24
 8006508:	3b11      	subs	r3, #17
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8119 	beq.w	8006748 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 8006516:	f7fd f92b 	bl	8003770 <get_fattime>
 800651a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800651e:	f103 030c 	add.w	r3, r3, #12
 8006522:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006524:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006528:	f103 0310 	add.w	r3, r3, #16
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330e      	adds	r3, #14
 8006530:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006534:	f102 020c 	add.w	r2, r2, #12
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006542:	f103 030c 	add.w	r3, r3, #12
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	b29a      	uxth	r2, r3
 800654e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006552:	f103 0310 	add.w	r3, r3, #16
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330f      	adds	r3, #15
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006562:	f103 030c 	add.w	r3, r3, #12
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	0c1a      	lsrs	r2, r3, #16
 800656a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800656e:	f103 0310 	add.w	r3, r3, #16
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3310      	adds	r3, #16
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800657e:	f103 030c 	add.w	r3, r3, #12
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	0e1a      	lsrs	r2, r3, #24
 8006586:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800658a:	f103 0310 	add.w	r3, r3, #16
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3311      	adds	r3, #17
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006596:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800659a:	f103 0310 	add.w	r3, r3, #16
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330b      	adds	r3, #11
 80065a2:	2200      	movs	r2, #0
 80065a4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80065a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80065aa:	f103 0310 	add.w	r3, r3, #16
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	331c      	adds	r3, #28
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80065ba:	f103 0310 	add.w	r3, r3, #16
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	331d      	adds	r3, #29
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80065ca:	f103 0310 	add.w	r3, r3, #16
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	331e      	adds	r3, #30
 80065d2:	2200      	movs	r2, #0
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80065da:	f103 0310 	add.w	r3, r3, #16
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	331f      	adds	r3, #31
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80065e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065ea:	3b18      	subs	r3, #24
 80065ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80065f6:	f102 0210 	add.w	r2, r2, #16
 80065fa:	6811      	ldr	r1, [r2, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe fbb6 	bl	8004d6e <ld_clust>
 8006602:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006606:	f103 0308 	add.w	r3, r3, #8
 800660a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800660c:	2100      	movs	r1, #0
 800660e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006612:	f103 0310 	add.w	r3, r3, #16
 8006616:	6818      	ldr	r0, [r3, #0]
 8006618:	f7fe fbd7 	bl	8004dca <st_clust>
				dj.fs->wflag = 1;
 800661c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006620:	3b18      	subs	r3, #24
 8006622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800662c:	3304      	adds	r3, #4
 800662e:	2201      	movs	r2, #1
 8006630:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 8006632:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006636:	f103 0308 	add.w	r3, r3, #8
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8083 	beq.w	8006748 <f_open+0x464>
					dw = dj.fs->winsect;
 8006642:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006646:	3b18      	subs	r3, #24
 8006648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006652:	330c      	adds	r3, #12
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800665a:	f102 020c 	add.w	r2, r2, #12
 800665e:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8006660:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006664:	3b18      	subs	r3, #24
 8006666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006670:	f102 0208 	add.w	r2, r2, #8
 8006674:	6811      	ldr	r1, [r2, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fd ff8f 	bl	800459a <remove_chain>
 800667c:	4603      	mov	r3, r0
 800667e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006682:	f102 0217 	add.w	r2, r2, #23
 8006686:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8006688:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800668c:	f103 0317 	add.w	r3, r3, #23
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d158      	bne.n	8006748 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800669a:	3b18      	subs	r3, #24
 800669c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80066a6:	f102 0208 	add.w	r2, r2, #8
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	3a01      	subs	r2, #1
 80066ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b2:	330c      	adds	r3, #12
 80066b4:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 80066b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80066ba:	3b18      	subs	r3, #24
 80066bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80066c6:	f102 020c 	add.w	r2, r2, #12
 80066ca:	6811      	ldr	r1, [r2, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fd fbdb 	bl	8003e88 <move_window>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80066d8:	f102 0217 	add.w	r2, r2, #23
 80066dc:	7013      	strb	r3, [r2, #0]
 80066de:	e033      	b.n	8006748 <f_open+0x464>
 80066e0:	20000064 	.word	0x20000064
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80066e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80066e8:	f103 0317 	add.w	r3, r3, #23
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d12a      	bne.n	8006748 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80066f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80066f6:	f103 0310 	add.w	r3, r3, #16
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	330b      	adds	r3, #11
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	d006      	beq.n	8006716 <f_open+0x432>
					res = FR_NO_FILE;
 8006708:	2304      	movs	r3, #4
 800670a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800670e:	f102 0217 	add.w	r2, r2, #23
 8006712:	7013      	strb	r3, [r2, #0]
 8006714:	e018      	b.n	8006748 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006716:	f107 0318 	add.w	r3, r7, #24
 800671a:	3b11      	subs	r3, #17
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d010      	beq.n	8006748 <f_open+0x464>
 8006726:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800672a:	f103 0310 	add.w	r3, r3, #16
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330b      	adds	r3, #11
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <f_open+0x464>
						res = FR_DENIED;
 800673c:	2307      	movs	r3, #7
 800673e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006742:	f102 0217 	add.w	r2, r2, #23
 8006746:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006748:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800674c:	f103 0317 	add.w	r3, r3, #23
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d15b      	bne.n	800680e <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006756:	f107 0318 	add.w	r3, r7, #24
 800675a:	3b11      	subs	r3, #17
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <f_open+0x496>
				mode |= FA__WRITTEN;
 8006766:	f107 0318 	add.w	r3, r7, #24
 800676a:	3b11      	subs	r3, #17
 800676c:	f107 0218 	add.w	r2, r7, #24
 8006770:	3a11      	subs	r2, #17
 8006772:	7812      	ldrb	r2, [r2, #0]
 8006774:	f042 0220 	orr.w	r2, r2, #32
 8006778:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800677a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800677e:	3b18      	subs	r3, #24
 8006780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800678a:	330c      	adds	r3, #12
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	f107 0318 	add.w	r3, r7, #24
 8006792:	3b0c      	subs	r3, #12
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679a:	331c      	adds	r3, #28
 800679c:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800679e:	f107 0318 	add.w	r3, r7, #24
 80067a2:	3b0c      	subs	r3, #12
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80067aa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80067ae:	f102 0210 	add.w	r2, r2, #16
 80067b2:	6812      	ldr	r2, [r2, #0]
 80067b4:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80067b6:	f107 0318 	add.w	r3, r7, #24
 80067ba:	3b11      	subs	r3, #17
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	f023 0301 	bic.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bf14      	ite	ne
 80067c6:	2301      	movne	r3, #1
 80067c8:	2300      	moveq	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80067d2:	3b18      	subs	r3, #24
 80067d4:	4611      	mov	r1, r2
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fd f9d0 	bl	8003b7c <inc_lock>
 80067dc:	4602      	mov	r2, r0
 80067de:	f107 0318 	add.w	r3, r7, #24
 80067e2:	3b0c      	subs	r3, #12
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80067ea:	3308      	adds	r3, #8
 80067ec:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 80067ee:	f107 0318 	add.w	r3, r7, #24
 80067f2:	3b0c      	subs	r3, #12
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80067fa:	3308      	adds	r3, #8
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d105      	bne.n	800680e <f_open+0x52a>
 8006802:	2302      	movs	r3, #2
 8006804:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006808:	f102 0217 	add.w	r2, r2, #23
 800680c:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800680e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006812:	f103 0317 	add.w	r3, r3, #23
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f040 8091 	bne.w	8006940 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 800681e:	f107 0318 	add.w	r3, r7, #24
 8006822:	3b0c      	subs	r3, #12
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800682a:	3306      	adds	r3, #6
 800682c:	f107 0218 	add.w	r2, r7, #24
 8006830:	3a11      	subs	r2, #17
 8006832:	7812      	ldrb	r2, [r2, #0]
 8006834:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 8006836:	f107 0318 	add.w	r3, r7, #24
 800683a:	3b0c      	subs	r3, #12
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006842:	3307      	adds	r3, #7
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006848:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800684c:	3b18      	subs	r3, #24
 800684e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006858:	f102 0210 	add.w	r2, r2, #16
 800685c:	6811      	ldr	r1, [r2, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fa85 	bl	8004d6e <ld_clust>
 8006864:	4602      	mov	r2, r0
 8006866:	f107 0318 	add.w	r3, r7, #24
 800686a:	3b0c      	subs	r3, #12
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006872:	3310      	adds	r3, #16
 8006874:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006876:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800687a:	f103 0310 	add.w	r3, r3, #16
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	331f      	adds	r3, #31
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	061a      	lsls	r2, r3, #24
 8006886:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800688a:	f103 0310 	add.w	r3, r3, #16
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	331e      	adds	r3, #30
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	041b      	lsls	r3, r3, #16
 8006896:	4313      	orrs	r3, r2
 8006898:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800689c:	f102 0210 	add.w	r2, r2, #16
 80068a0:	6812      	ldr	r2, [r2, #0]
 80068a2:	321d      	adds	r2, #29
 80068a4:	7812      	ldrb	r2, [r2, #0]
 80068a6:	0212      	lsls	r2, r2, #8
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80068ae:	f102 0210 	add.w	r2, r2, #16
 80068b2:	6812      	ldr	r2, [r2, #0]
 80068b4:	321c      	adds	r2, #28
 80068b6:	7812      	ldrb	r2, [r2, #0]
 80068b8:	431a      	orrs	r2, r3
 80068ba:	f107 0318 	add.w	r3, r7, #24
 80068be:	3b0c      	subs	r3, #12
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c6:	330c      	adds	r3, #12
 80068c8:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 80068ca:	f107 0318 	add.w	r3, r7, #24
 80068ce:	3b0c      	subs	r3, #12
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d6:	3308      	adds	r3, #8
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 80068dc:	f107 0318 	add.w	r3, r7, #24
 80068e0:	3b0c      	subs	r3, #12
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e8:	3318      	adds	r3, #24
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80068ee:	f107 0318 	add.w	r3, r7, #24
 80068f2:	3b0c      	subs	r3, #12
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80068fa:	3304      	adds	r3, #4
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006900:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006904:	3b18      	subs	r3, #24
 8006906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	f107 0318 	add.w	r3, r7, #24
 8006910:	3b0c      	subs	r3, #12
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006918:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 800691a:	f107 0318 	add.w	r3, r7, #24
 800691e:	3b0c      	subs	r3, #12
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800692c:	3306      	adds	r3, #6
 800692e:	881a      	ldrh	r2, [r3, #0]
 8006930:	f107 0318 	add.w	r3, r7, #24
 8006934:	3b0c      	subs	r3, #12
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800693c:	3304      	adds	r3, #4
 800693e:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006940:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006944:	f103 0317 	add.w	r3, r3, #23
 8006948:	781b      	ldrb	r3, [r3, #0]
}
 800694a:	4618      	mov	r0, r3
 800694c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop

08006958 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08c      	sub	sp, #48	; 0x30
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7ff fc2f 	bl	80061d4 <validate>
 8006976:	4603      	mov	r3, r0
 8006978:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800697a:	7ffb      	ldrb	r3, [r7, #31]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <f_read+0x2c>
 8006980:	7ffb      	ldrb	r3, [r7, #31]
 8006982:	e1fb      	b.n	8006d7c <f_read+0x424>
	if (fp->err)								/* Check error */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800698a:	3307      	adds	r3, #7
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006998:	3307      	adds	r3, #7
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	e1ee      	b.n	8006d7c <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a4:	3306      	adds	r3, #6
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 80069b0:	2307      	movs	r3, #7
 80069b2:	e1e3      	b.n	8006d7c <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ba:	330c      	adds	r3, #12
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069c4:	3308      	adds	r3, #8
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	f240 81ce 	bls.w	8006d72 <f_read+0x41a>
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80069da:	e1ca      	b.n	8006d72 <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e2:	3308      	adds	r3, #8
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f2:	330a      	adds	r3, #10
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	fbb2 f1f3 	udiv	r1, r2, r3
 80069fa:	fb03 f301 	mul.w	r3, r3, r1
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f040 8160 	bne.w	8006cc6 <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a1c:	330a      	adds	r3, #10
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a32:	3302      	adds	r3, #2
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d14a      	bne.n	8006ada <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a58:	3310      	adds	r3, #16
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a5e:	e01f      	b.n	8006aa0 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006a66:	3304      	adds	r3, #4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a74:	3308      	adds	r3, #8
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7fd fea6 	bl	80047cc <clmt_clust>
 8006a80:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006a82:	e00d      	b.n	8006aa0 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a92:	3314      	adds	r3, #20
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4619      	mov	r1, r3
 8006a98:	4610      	mov	r0, r2
 8006a9a:	f7fd fb1f 	bl	80040dc <get_fat>
 8006a9e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d807      	bhi.n	8006ab6 <f_read+0x15e>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aac:	3307      	adds	r3, #7
 8006aae:	2202      	movs	r2, #2
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e162      	b.n	8006d7c <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006abc:	d107      	bne.n	8006ace <f_read+0x176>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac4:	3307      	adds	r3, #7
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	2301      	movs	r3, #1
 8006acc:	e156      	b.n	8006d7c <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad4:	3314      	adds	r3, #20
 8006ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad8:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae8:	3314      	adds	r3, #20
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fd facd 	bl	800408e <clust2sect>
 8006af4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d107      	bne.n	8006b0c <f_read+0x1b4>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b02:	3307      	adds	r3, #7
 8006b04:	2202      	movs	r2, #2
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e137      	b.n	8006d7c <f_read+0x424>
			sect += csect;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4413      	add	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b20:	330a      	adds	r3, #10
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d070      	beq.n	8006c16 <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006b34:	7dfa      	ldrb	r2, [r7, #23]
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	441a      	add	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b46:	3302      	adds	r3, #2
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d90b      	bls.n	8006b66 <f_read+0x20e>
					cc = fp->fs->csize - csect;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5a:	3302      	adds	r3, #2
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b72:	3301      	adds	r3, #1
 8006b74:	7818      	ldrb	r0, [r3, #0]
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	6a39      	ldr	r1, [r7, #32]
 8006b7c:	f7fc fe94 	bl	80038a8 <disk_read>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b8c:	3307      	adds	r3, #7
 8006b8e:	2201      	movs	r2, #1
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	2301      	movs	r3, #1
 8006b94:	e0f2      	b.n	8006d7c <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b9c:	3306      	adds	r3, #6
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d028      	beq.n	8006bfa <f_read+0x2a2>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bae:	3318      	adds	r3, #24
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d91e      	bls.n	8006bfa <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc2:	3318      	adds	r3, #24
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad2      	subs	r2, r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd6:	330a      	adds	r3, #10
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	fb03 f302 	mul.w	r3, r3, r2
 8006bde:	6a3a      	ldr	r2, [r7, #32]
 8006be0:	18d0      	adds	r0, r2, r3
 8006be2:	68f9      	ldr	r1, [r7, #12]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bf0:	330a      	adds	r3, #10
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f7fc feb5 	bl	8003964 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c06:	330a      	adds	r3, #10
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	fb02 f303 	mul.w	r3, r2, r3
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006c14:	e093      	b.n	8006d3e <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c1c:	3318      	adds	r3, #24
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d049      	beq.n	8006cba <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2c:	3306      	adds	r3, #6
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d028      	beq.n	8006c8a <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c44:	3301      	adds	r3, #1
 8006c46:	7818      	ldrb	r0, [r3, #0]
 8006c48:	68f9      	ldr	r1, [r7, #12]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c50:	3318      	adds	r3, #24
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	2301      	movs	r3, #1
 8006c56:	f7fc fe47 	bl	80038e8 <disk_write>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c66:	3307      	adds	r3, #7
 8006c68:	2201      	movs	r2, #1
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e085      	b.n	8006d7c <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c76:	3306      	adds	r3, #6
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c86:	3306      	adds	r3, #6
 8006c88:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c96:	3301      	adds	r3, #1
 8006c98:	7818      	ldrb	r0, [r3, #0]
 8006c9a:	68f9      	ldr	r1, [r7, #12]
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	f7fc fe02 	bl	80038a8 <disk_read>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb0:	3307      	adds	r3, #7
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e060      	b.n	8006d7c <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc0:	3318      	adds	r3, #24
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cd2:	330a      	adds	r3, #10
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cde:	3308      	adds	r3, #8
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cee:	330a      	adds	r3, #10
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	fbb2 f1f3 	udiv	r1, r2, r3
 8006cf6:	fb03 f301 	mul.w	r3, r3, r1
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	1ac3      	subs	r3, r0, r3
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d901      	bls.n	8006d0c <f_read+0x3b4>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d12:	3308      	adds	r3, #8
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d22:	330a      	adds	r3, #10
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d2a:	fb03 f301 	mul.w	r3, r3, r1
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d36:	4619      	mov	r1, r3
 8006d38:	6a38      	ldr	r0, [r7, #32]
 8006d3a:	f7fc fe13 	bl	8003964 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006d3e:	6a3a      	ldr	r2, [r7, #32]
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	4413      	add	r3, r2
 8006d44:	623b      	str	r3, [r7, #32]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	441a      	add	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	441a      	add	r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f47f ae31 	bne.w	80069dc <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3730      	adds	r7, #48	; 0x30
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fa21 	bl	80061d4 <validate>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f040 80cc 	bne.w	8006f36 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da4:	3306      	adds	r3, #6
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	f003 0320 	and.w	r3, r3, #32
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80c2 	beq.w	8006f36 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db8:	3306      	adds	r3, #6
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d022      	beq.n	8006e0a <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	7818      	ldrb	r0, [r3, #0]
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ddc:	3318      	adds	r3, #24
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	2301      	movs	r3, #1
 8006de2:	f7fc fd81 	bl	80038e8 <disk_write>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006dec:	2301      	movs	r3, #1
 8006dee:	e0a3      	b.n	8006f38 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df6:	3306      	adds	r3, #6
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e06:	3306      	adds	r3, #6
 8006e08:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e18:	331c      	adds	r3, #28
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	f7fd f832 	bl	8003e88 <move_window>
 8006e24:	4603      	mov	r3, r0
 8006e26:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f040 8083 	bne.w	8006f36 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	330b      	adds	r3, #11
 8006e3e:	781a      	ldrb	r2, [r3, #0]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	330b      	adds	r3, #11
 8006e44:	f042 0220 	orr.w	r2, r2, #32
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e52:	330c      	adds	r3, #12
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	331c      	adds	r3, #28
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e64:	330c      	adds	r3, #12
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	0a1b      	lsrs	r3, r3, #8
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	331d      	adds	r3, #29
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	0c1a      	lsrs	r2, r3, #16
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	331e      	adds	r3, #30
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	701a      	strb	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e90:	330c      	adds	r3, #12
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	0e1a      	lsrs	r2, r3, #24
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	331f      	adds	r3, #31
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea4:	3310      	adds	r3, #16
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6938      	ldr	r0, [r7, #16]
 8006eac:	f7fd ff8d 	bl	8004dca <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006eb0:	f7fc fc5e 	bl	8003770 <get_fattime>
 8006eb4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	3316      	adds	r3, #22
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	0a1b      	lsrs	r3, r3, #8
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	3317      	adds	r3, #23
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	0c1a      	lsrs	r2, r3, #16
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	3318      	adds	r3, #24
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	701a      	strb	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	0e1a      	lsrs	r2, r3, #24
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	3319      	adds	r3, #25
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	3312      	adds	r3, #18
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	3313      	adds	r3, #19
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006efe:	3306      	adds	r3, #6
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	f023 0320 	bic.w	r3, r3, #32
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f0e:	3306      	adds	r3, #6
 8006f10:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f1e:	3304      	adds	r3, #4
 8006f20:	2201      	movs	r2, #1
 8006f22:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fc ffdf 	bl	8003ef0 <sync_fs>
 8006f32:	4603      	mov	r3, r0
 8006f34:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff ff1b 	bl	8006d84 <f_sync>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d119      	bne.n	8006f8c <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff f93b 	bl	80061d4 <validate>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d111      	bne.n	8006f8c <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006f6e:	3308      	adds	r3, #8
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fc fec2 	bl	8003cfc <dec_lock>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d104      	bne.n	8006f8c <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006fae:	4b1e      	ldr	r3, [pc, #120]	; (8007028 <FATFS_LinkDriverEx+0x90>)
 8006fb0:	7a5b      	ldrb	r3, [r3, #9]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d831      	bhi.n	800701c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006fb8:	4b1b      	ldr	r3, [pc, #108]	; (8007028 <FATFS_LinkDriverEx+0x90>)
 8006fba:	7a5b      	ldrb	r3, [r3, #9]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4b19      	ldr	r3, [pc, #100]	; (8007028 <FATFS_LinkDriverEx+0x90>)
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006fc6:	4b18      	ldr	r3, [pc, #96]	; (8007028 <FATFS_LinkDriverEx+0x90>)
 8006fc8:	7a5b      	ldrb	r3, [r3, #9]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	4a16      	ldr	r2, [pc, #88]	; (8007028 <FATFS_LinkDriverEx+0x90>)
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006fd6:	4b14      	ldr	r3, [pc, #80]	; (8007028 <FATFS_LinkDriverEx+0x90>)
 8006fd8:	7a5b      	ldrb	r3, [r3, #9]
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4b12      	ldr	r3, [pc, #72]	; (8007028 <FATFS_LinkDriverEx+0x90>)
 8006fe0:	4413      	add	r3, r2
 8006fe2:	79fa      	ldrb	r2, [r7, #7]
 8006fe4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006fe6:	4b10      	ldr	r3, [pc, #64]	; (8007028 <FATFS_LinkDriverEx+0x90>)
 8006fe8:	7a5b      	ldrb	r3, [r3, #9]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	b2d1      	uxtb	r1, r2
 8006ff0:	4a0d      	ldr	r2, [pc, #52]	; (8007028 <FATFS_LinkDriverEx+0x90>)
 8006ff2:	7251      	strb	r1, [r2, #9]
 8006ff4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006ff6:	7dbb      	ldrb	r3, [r7, #22]
 8006ff8:	3330      	adds	r3, #48	; 0x30
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	3301      	adds	r3, #1
 8007004:	223a      	movs	r2, #58	; 0x3a
 8007006:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	3302      	adds	r3, #2
 800700c:	222f      	movs	r2, #47	; 0x2f
 800700e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	3303      	adds	r3, #3
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800701c:	7dfb      	ldrb	r3, [r7, #23]
}
 800701e:	4618      	mov	r0, r3
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr
 8007028:	20000264 	.word	0x20000264

0800702c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007036:	2200      	movs	r2, #0
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff ffac 	bl	8006f98 <FATFS_LinkDriverEx>
 8007040:	4603      	mov	r3, r0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	6039      	str	r1, [r7, #0]
 8007056:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	2b7f      	cmp	r3, #127	; 0x7f
 800705c:	d802      	bhi.n	8007064 <ff_convert+0x18>
		c = chr;
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	81fb      	strh	r3, [r7, #14]
 8007062:	e025      	b.n	80070b0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00b      	beq.n	8007082 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800706a:	88fb      	ldrh	r3, [r7, #6]
 800706c:	2bff      	cmp	r3, #255	; 0xff
 800706e:	d805      	bhi.n	800707c <ff_convert+0x30>
 8007070:	88fb      	ldrh	r3, [r7, #6]
 8007072:	3b80      	subs	r3, #128	; 0x80
 8007074:	4a11      	ldr	r2, [pc, #68]	; (80070bc <ff_convert+0x70>)
 8007076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800707a:	e000      	b.n	800707e <ff_convert+0x32>
 800707c:	2300      	movs	r3, #0
 800707e:	81fb      	strh	r3, [r7, #14]
 8007080:	e016      	b.n	80070b0 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8007082:	2300      	movs	r3, #0
 8007084:	81fb      	strh	r3, [r7, #14]
 8007086:	e009      	b.n	800709c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007088:	89fb      	ldrh	r3, [r7, #14]
 800708a:	4a0c      	ldr	r2, [pc, #48]	; (80070bc <ff_convert+0x70>)
 800708c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007090:	88fa      	ldrh	r2, [r7, #6]
 8007092:	429a      	cmp	r2, r3
 8007094:	d006      	beq.n	80070a4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007096:	89fb      	ldrh	r3, [r7, #14]
 8007098:	3301      	adds	r3, #1
 800709a:	81fb      	strh	r3, [r7, #14]
 800709c:	89fb      	ldrh	r3, [r7, #14]
 800709e:	2b7f      	cmp	r3, #127	; 0x7f
 80070a0:	d9f2      	bls.n	8007088 <ff_convert+0x3c>
 80070a2:	e000      	b.n	80070a6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80070a4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80070a6:	89fb      	ldrh	r3, [r7, #14]
 80070a8:	3380      	adds	r3, #128	; 0x80
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80070b0:	89fb      	ldrh	r3, [r7, #14]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr
 80070bc:	080072b8 	.word	0x080072b8

080070c0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	e002      	b.n	80070d6 <ff_wtoupper+0x16>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3301      	adds	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	4a0f      	ldr	r2, [pc, #60]	; (8007114 <ff_wtoupper+0x54>)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d006      	beq.n	80070f0 <ff_wtoupper+0x30>
 80070e2:	4a0c      	ldr	r2, [pc, #48]	; (8007114 <ff_wtoupper+0x54>)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d1ef      	bne.n	80070d0 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80070f0:	4a08      	ldr	r2, [pc, #32]	; (8007114 <ff_wtoupper+0x54>)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <ff_wtoupper+0x46>
 80070fc:	4a06      	ldr	r2, [pc, #24]	; (8007118 <ff_wtoupper+0x58>)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007104:	e000      	b.n	8007108 <ff_wtoupper+0x48>
 8007106:	88fb      	ldrh	r3, [r7, #6]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	080073b8 	.word	0x080073b8
 8007118:	08007598 	.word	0x08007598

0800711c <__libc_init_array>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	2500      	movs	r5, #0
 8007120:	4e0c      	ldr	r6, [pc, #48]	; (8007154 <__libc_init_array+0x38>)
 8007122:	4c0d      	ldr	r4, [pc, #52]	; (8007158 <__libc_init_array+0x3c>)
 8007124:	1ba4      	subs	r4, r4, r6
 8007126:	10a4      	asrs	r4, r4, #2
 8007128:	42a5      	cmp	r5, r4
 800712a:	d109      	bne.n	8007140 <__libc_init_array+0x24>
 800712c:	f000 f822 	bl	8007174 <_init>
 8007130:	2500      	movs	r5, #0
 8007132:	4e0a      	ldr	r6, [pc, #40]	; (800715c <__libc_init_array+0x40>)
 8007134:	4c0a      	ldr	r4, [pc, #40]	; (8007160 <__libc_init_array+0x44>)
 8007136:	1ba4      	subs	r4, r4, r6
 8007138:	10a4      	asrs	r4, r4, #2
 800713a:	42a5      	cmp	r5, r4
 800713c:	d105      	bne.n	800714a <__libc_init_array+0x2e>
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007144:	4798      	blx	r3
 8007146:	3501      	adds	r5, #1
 8007148:	e7ee      	b.n	8007128 <__libc_init_array+0xc>
 800714a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800714e:	4798      	blx	r3
 8007150:	3501      	adds	r5, #1
 8007152:	e7f2      	b.n	800713a <__libc_init_array+0x1e>
 8007154:	08007778 	.word	0x08007778
 8007158:	08007778 	.word	0x08007778
 800715c:	08007778 	.word	0x08007778
 8007160:	0800777c 	.word	0x0800777c

08007164 <memset>:
 8007164:	4603      	mov	r3, r0
 8007166:	4402      	add	r2, r0
 8007168:	4293      	cmp	r3, r2
 800716a:	d100      	bne.n	800716e <memset+0xa>
 800716c:	4770      	bx	lr
 800716e:	f803 1b01 	strb.w	r1, [r3], #1
 8007172:	e7f9      	b.n	8007168 <memset+0x4>

08007174 <_init>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	bf00      	nop
 8007178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717a:	bc08      	pop	{r3}
 800717c:	469e      	mov	lr, r3
 800717e:	4770      	bx	lr

08007180 <_fini>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	bf00      	nop
 8007184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007186:	bc08      	pop	{r3}
 8007188:	469e      	mov	lr, r3
 800718a:	4770      	bx	lr
